
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace continuous_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 385> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 262, column 2 to column 81)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 265, column 2 to column 56)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 266, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 267, column 2 to column 31)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 268, column 2 to column 29)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 269, column 2 to column 61)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 270, column 2 to column 49)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 271, column 2 to column 16)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 272, column 2 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 273, column 2 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 274, column 2 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 275, column 2 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 277, column 2 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 280, column 2 to column 23)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 282, column 2 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 283, column 2 to column 14)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 284, column 2 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 287, column 4 to line 289, column 52)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 286, column 18 to line 290, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 286, column 2 to line 290, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 311, column 4 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 313, column 6 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 314, column 6 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 316, column 8 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 317, column 8 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 315, column 34 to line 318, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 315, column 6 to line 318, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 319, column 6 to column 49)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 320, column 6 to column 31)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 312, column 19 to line 321, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 312, column 4 to line 321, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 310, column 28 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 310, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 309, column 4 to column 87)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 308, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 307, column 4 to column 66)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 306, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 303, column 4 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 304, column 4 to column 79)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 302, column 28 to line 305, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 302, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 299, column 4 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 300, column 4 to column 75)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 298, column 28 to line 301, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 298, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 296, column 4 to column 75)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 295, column 43 to line 297, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 295, column 28 to line 297, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 295, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 294, column 28 to column 70)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 294, column 7 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 293, column 28 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 293, column 2 to line 322, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 337, column 4 to line 338, column 60)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 336, column 9 to line 339, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 329, column 6 to column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 331, column 8 to column 37)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 330, column 6 to line 331, column 37)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 328, column 9 to line 332, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 327, column 6 to column 31)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 326, column 4 to line 332, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 334, column 4 to line 335, column 63)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 325, column 18 to line 336, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 325, column 2 to line 339, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 342, column 2 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 345, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 345, column 2 to column 16)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 346, column 2 to column 13)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 348, column 2 to column 45)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 350, column 2 to column 16)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 352, column 4 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 351, column 2 to line 352, column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 353, column 2 to column 52)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 356, column 4 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 355, column 2 to line 356, column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 365, column 4 to column 153)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 360, column 9 to line 366, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 359, column 4 to column 47)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 358, column 24 to line 360, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 358, column 2 to line 366, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 369, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 375, column 5 to column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 373, column 6 to column 84)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 372, column 9 to line 375, column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 371, column 6 to column 63)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 370, column 4 to line 375, column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 368, column 71 to line 376, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 368, column 2 to line 376, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 413, column 4 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 412, column 28 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 412, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 408, column 4 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 409, column 4 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 410, column 4 to column 64)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 407, column 28 to line 411, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 407, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 404, column 4 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 405, column 4 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 403, column 28 to line 406, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 403, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 392, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 393, column 4 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 394, column 4 to column 54)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 395, column 4 to column 72)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 396, column 4 to column 54)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 398, column 4 to column 78)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 399, column 4 to column 55)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 400, column 4 to column 87)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 401, column 4 to column 66)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 391, column 28 to line 402, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 391, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 383, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 384, column 4 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 385, column 4 to column 54)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 386, column 4 to column 72)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 387, column 4 to column 55)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 388, column 4 to column 87)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 389, column 4 to column 66)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 382, column 28 to line 390, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 382, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 381, column 28 to column 65)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 381, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 380, column 28 to column 65)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 380, column 7 to line 414, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 422, column 6 to line 423, column 58)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 421, column 9 to line 423, column 58)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 420, column 6 to column 89)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 419, column 4 to line 423, column 58)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 418, column 26 to line 425, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 418, column 2 to line 425, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 427, column 2 to line 428, column 55)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 169, column 2 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 170, column 2 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 173, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 173, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 173, column 2 to column 16)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 175, column 2 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 176, column 2 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 177, column 2 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 178, column 33 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 178, column 2 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 181, column 2 to column 37)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 182, column 2 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 186, column 2 to column 34)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 187, column 2 to column 48)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 190, column 2 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 193, column 2 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 194, column 9 to column 28)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 194, column 2 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 196, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 196, column 2 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 199, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 199, column 2 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 200, column 2 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 201, column 2 to column 36)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 203, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 203, column 2 to column 23)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 204, column 2 to column 32)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 205, column 2 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 207, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 207, column 2 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 208, column 2 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 209, column 2 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 211, column 2 to column 32)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 212, column 2 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 213, column 2 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 214, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 215, column 27 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 215, column 2 to column 52)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 219, column 2 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 220, column 17 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 220, column 2 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 221, column 17 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 221, column 2 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 222, column 2 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 223, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 226, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 226, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 227, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 227, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 228, column 2 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 229, column 30 to column 47)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 229, column 2 to column 49)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 230, column 2 to column 34)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 231, column 31 to column 49)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 231, column 2 to column 51)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 234, column 2 to column 28)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 235, column 9 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 235, column 2 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 236, column 28 to column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 236, column 2 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 237, column 36 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 237, column 2 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 240, column 2 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 241, column 2 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 242, column 2 to column 36)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 243, column 2 to column 23)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 244, column 22 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 244, column 2 to column 41)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 245, column 2 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 249, column 7 to column 14)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 248, column 28 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 248, column 7 to line 249, column 14)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 247, column 28 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 247, column 7 to line 249, column 14)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 246, column 23 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 246, column 2 to line 249, column 14)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 254, column 8 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 255, column 8 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 253, column 24 to line 256, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 253, column 6 to line 256, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 252, column 18 to line 257, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 252, column 4 to line 257, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 258, column 22 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 258, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 251, column 17 to line 259, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 251, column 2 to line 259, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 262, column 66 to column 79)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 265, column 9 to column 47)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 266, column 23 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 267, column 27 to column 29)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 267, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 268, column 21 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 269, column 25 to column 59)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 269, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 270, column 32 to column 47)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 271, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 272, column 9 to column 16)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 273, column 26 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 274, column 18 to column 35)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 275, column 18 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 277, column 30 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 277, column 29 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 280, column 12 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 280, column 11 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 282, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 283, column 9 to column 10)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 284, column 9 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 6, column 11 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 6, column 4 to column 32)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 7, column 4 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 8, column 4 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 9, column 4 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 10, column 4 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 14, column 6 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 21, column 15 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 21, column 18 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 21, column 8 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 22, column 8 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 23, column 8 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 24, column 8 to column 69)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 25, column 15 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 25, column 8 to column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 26, column 8 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 29, column 8 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 30, column 8 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 31, column 8 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 34, column 8 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 35, column 8 to column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 36, column 8 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 37, column 8 to column 53)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 38, column 8 to column 33)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 41, column 10 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 42, column 17 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 42, column 10 to column 54)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 43, column 10 to column 78)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 44, column 10 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 45, column 10 to column 46)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 46, column 24 to column 61)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 46, column 10 to column 61)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 47, column 10 to column 61)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 48, column 10 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 40, column 30 to line 49, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 40, column 8 to line 49, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 53, column 10 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 54, column 10 to column 28)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 52, column 40 to line 55, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 52, column 24 to line 55, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 52, column 8 to line 55, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 20, column 11 to line 56, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 16, column 8 to column 63)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 18, column 8 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 15, column 19 to line 19, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 15, column 6 to line 56, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 13, column 25 to line 57, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 13, column 4 to line 57, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 58, column 4 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 5, column 2 to line 59, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 63, column 11 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 63, column 4 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 64, column 4 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 65, column 4 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 67, column 6 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 76, column 15 to column 17)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 76, column 18 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 76, column 8 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 78, column 10 to column 43)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 79, column 10 to column 28)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 81, column 12 to column 45)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 82, column 12 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 80, column 29 to line 83, column 11)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 80, column 10 to line 83, column 11)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 77, column 24 to line 84, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 77, column 8 to line 84, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 86, column 17 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 86, column 10 to column 59)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 87, column 10 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 88, column 26 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 88, column 10 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 89, column 10 to column 27)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 85, column 26 to line 90, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 85, column 8 to line 90, column 9)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 75, column 11 to line 91, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 69, column 8 to column 51)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 71, column 10 to column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 70, column 8 to line 71, column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 72, column 8 to column 23)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 73, column 8 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 68, column 19 to line 74, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 68, column 6 to line 91, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 66, column 25 to line 92, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 66, column 4 to line 92, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 93, column 4 to column 13)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 62, column 2 to line 94, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 100, column 4 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 101, column 4 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 102, column 4 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 103, column 4 to column 38)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 105, column 13 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 105, column 6 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 106, column 13 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 106, column 6 to column 30)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 107, column 6 to column 59)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 108, column 6 to column 19)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 109, column 6 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 110, column 6 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 112, column 8 to column 18)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 113, column 8 to column 28)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 114, column 8 to column 23)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 111, column 28 to line 115, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 111, column 6 to line 115, column 7)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 116, column 6 to column 78)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 117, column 6 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 104, column 33 to line 118, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 104, column 19 to line 118, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 104, column 4 to line 118, column 5)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 119, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 120, column 4 to column 42)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 121, column 4 to column 20)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 99, column 2 to line 122, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 126, column 4 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 127, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 127, column 4 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 128, column 4 to column 78)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 129, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 129, column 4 to column 39)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 130, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 130, column 4 to column 82)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 131, column 4 to column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 125, column 70 to line 132, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 136, column 4 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 137, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 137, column 4 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 138, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 138, column 4 to column 47)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 139, column 4 to column 78)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 140, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 140, column 4 to column 50)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 141, column 11 to column 12)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 141, column 4 to line 142, column 69)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 143, column 4 to column 40)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 135, column 74 to line 144, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 147, column 4 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 148, column 4 to column 21)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 149, column 4 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 150, column 4 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 151, column 4 to column 22)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 152, column 4 to column 26)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 153, column 4 to column 24)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 154, column 4 to column 25)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 155, column 4 to line 157, column 84)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 146, column 28 to line 158, column 3)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 164, column 4 to column 102)",
 " (in '/Users/vdorie/Repositories/stan4bart/src/stan_files/continuous.stan', line 163, column 52 to line 165, column 3)"};

struct hs_prior_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& z_beta, const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
             const T3__& global_prior_scale, const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) const;
};
struct pw_gauss_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>, T2__>, -1, 1>
  operator()(const T0__& y, const T1__& eta, const T2__& sigma,
             std::ostream* pstream__) const;
};
struct CFt_functor__ {
  template <typename T0__, typename T1__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& z, const T1__& df, std::ostream* pstream__) const;
};
struct decov_lp_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T_lp__, typename T_lp_accum__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr,
            stan::require_stan_scalar_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>,
                       stan::promote_args_t<T5__, T6__,
                                            stan::value_type_t<T7__>>>
  operator()(const T0__& z_b, const T1__& z_T, const T2__& rho,
             const T3__& zeta, const T4__& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta, const T7__& shape, const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__,
             std::ostream* pstream__) const;
};
struct hsplus_prior_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr,
            stan::require_stan_scalar_t<T4__>* = nullptr,
            stan::require_stan_scalar_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& z_beta, const std::vector<T1__>& global,
             const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
             const T3__& global_prior_scale, const T4__& error_scale,
             const T5__& c2, std::ostream* pstream__) const;
};
struct make_b_functor__ {
  template <typename T0__, typename T1__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  operator()(const T0__& z_b, const T1__& theta_L, const std::vector<int>& p,
             const std::vector<int>& l, std::ostream* pstream__) const;
};
struct make_theta_L_functor__ {
  template <typename T2__, typename T3__, typename T4__, typename T5__,
            typename T6__, typename T7__,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr,
            stan::require_col_vector_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>, stan::value_type_t<T5__>,
                       stan::value_type_t<T6__>,
                       stan::promote_args_t<stan::value_type_t<T7__>>>, -1, 1>
  operator()(const int& len_theta_L, const std::vector<int>& p,
             const T2__& dispersion, const T3__& tau, const T4__& scale,
             const T5__& zeta, const T6__& rho, const T7__& z_T,
             std::ostream* pstream__) const;
};

template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr,
          stan::require_col_vector_t<T6__>* = nullptr,
          stan::require_col_vector_t<T7__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>, stan::value_type_t<T5__>,
                     stan::value_type_t<T6__>,
                     stan::promote_args_t<stan::value_type_t<T7__>>>, -1, 1>
  make_theta_L(const int& len_theta_L, const std::vector<int>& p,
               const T2__& dispersion, const T3__& tau_arg__,
               const T4__& scale_arg__, const T5__& zeta_arg__,
               const T6__& rho_arg__, const T7__& z_T_arg__,
               std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T2__, stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>,
                                 stan::value_type_t<T5__>,
                                 stan::value_type_t<T6__>,
                                 stan::promote_args_t<stan::value_type_t<T7__>>>;
    int current_statement__ = 0; 
    const auto& tau = stan::math::to_ref(tau_arg__);
    const auto& scale = stan::math::to_ref(scale_arg__);
    const auto& zeta = stan::math::to_ref(zeta_arg__);
    const auto& rho = stan::math::to_ref(rho_arg__);
    const auto& z_T = stan::math::to_ref(z_T_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 239;
      stan::math::validate_non_negative_index("theta_L", "len_theta_L",
                                              len_theta_L);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_L =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_theta_L,
           DUMMY_VAR__);
      int zeta_mark = std::numeric_limits<int>::min();
      current_statement__ = 241;
      zeta_mark = 1;
      int rho_mark = std::numeric_limits<int>::min();
      current_statement__ = 242;
      rho_mark = 1;
      int z_T_mark = std::numeric_limits<int>::min();
      current_statement__ = 243;
      z_T_mark = 1;
      int theta_L_mark = std::numeric_limits<int>::min();
      current_statement__ = 244;
      theta_L_mark = 1;
      current_statement__ = 286;
      for (int i = 1; i <= stan::math::size(p); ++i) {
        int nc = std::numeric_limits<int>::min();
        current_statement__ = 245;
        nc = stan::model::rvalue(p, "p", stan::model::index_uni(i));
        current_statement__ = 284;
        if (stan::math::logical_eq(nc, 1)) {
          current_statement__ = 281;
          stan::model::assign(theta_L,
            ((stan::model::rvalue(tau, "tau", stan::model::index_uni(i)) *
               stan::model::rvalue(scale, "scale", stan::model::index_uni(i)))
              * dispersion),
            "assigning variable theta_L", stan::model::index_uni(theta_L_mark));
          current_statement__ = 282;
          theta_L_mark = (theta_L_mark + 1);
        } else {
          current_statement__ = 246;
          stan::math::validate_non_negative_index("T_i", "nc", nc);
          current_statement__ = 247;
          stan::math::validate_non_negative_index("T_i", "nc", nc);
          Eigen::Matrix<local_scalar_t__, -1, -1> T_i =
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nc, nc,
               DUMMY_VAR__);
          local_scalar_t__ std_dev = DUMMY_VAR__;
          local_scalar_t__ T21 = DUMMY_VAR__;
          local_scalar_t__ trace_T_i = DUMMY_VAR__;
          current_statement__ = 251;
          trace_T_i = (stan::math::square(
                         ((stan::model::rvalue(tau, "tau",
                             stan::model::index_uni(i)) *
                            stan::model::rvalue(scale, "scale",
                              stan::model::index_uni(i))) * dispersion)) *
                        nc);
          current_statement__ = 252;
          stan::math::validate_non_negative_index("pi", "nc", nc);
          Eigen::Matrix<local_scalar_t__, -1, 1> pi =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nc,
               DUMMY_VAR__);
          current_statement__ = 253;
          stan::model::assign(pi, stan::math::segment(zeta, zeta_mark, nc),
            "assigning variable pi");
          current_statement__ = 254;
          stan::model::assign(pi,
            stan::math::divide(stan::model::deep_copy(pi),
              stan::math::sum(pi)), "assigning variable pi");
          current_statement__ = 255;
          zeta_mark = (zeta_mark + nc);
          current_statement__ = 256;
          std_dev = stan::math::sqrt(
                      (stan::model::rvalue(pi, "pi",
                         stan::model::index_uni(1)) * trace_T_i));
          current_statement__ = 257;
          stan::model::assign(T_i, std_dev,
            "assigning variable T_i", stan::model::index_uni(1),
                                        stan::model::index_uni(1));
          current_statement__ = 258;
          std_dev = stan::math::sqrt(
                      (stan::model::rvalue(pi, "pi",
                         stan::model::index_uni(2)) * trace_T_i));
          current_statement__ = 259;
          T21 = ((2.0 *
                   stan::model::rvalue(rho, "rho",
                     stan::model::index_uni(rho_mark))) - 1.0);
          current_statement__ = 260;
          rho_mark = (rho_mark + 1);
          current_statement__ = 261;
          stan::model::assign(T_i,
            (std_dev * stan::math::sqrt((1.0 - stan::math::square(T21)))),
            "assigning variable T_i", stan::model::index_uni(2),
                                        stan::model::index_uni(2));
          current_statement__ = 262;
          stan::model::assign(T_i, (std_dev * T21),
            "assigning variable T_i", stan::model::index_uni(2),
                                        stan::model::index_uni(1));
          current_statement__ = 274;
          for (int r = 2; r <= (nc - 1); ++r) {
            int rp1 = std::numeric_limits<int>::min();
            current_statement__ = 263;
            rp1 = (r + 1);
            current_statement__ = 264;
            stan::math::validate_non_negative_index("T_row", "r", r);
            Eigen::Matrix<local_scalar_t__, -1, 1> T_row =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(r,
                 DUMMY_VAR__);
            current_statement__ = 265;
            stan::model::assign(T_row, stan::math::segment(z_T, z_T_mark, r),
              "assigning variable T_row");
            local_scalar_t__ scale_factor = DUMMY_VAR__;
            current_statement__ = 266;
            scale_factor = (stan::math::sqrt(
                              (stan::model::rvalue(rho, "rho",
                                 stan::model::index_uni(rho_mark)) /
                                stan::math::dot_self(T_row))) * std_dev);
            current_statement__ = 267;
            z_T_mark = (z_T_mark + r);
            current_statement__ = 268;
            std_dev = stan::math::sqrt(
                        (stan::model::rvalue(pi, "pi",
                           stan::model::index_uni(rp1)) * trace_T_i));
            current_statement__ = 270;
            for (int c = 1; c <= r; ++c) {
              current_statement__ = 269;
              stan::model::assign(T_i,
                (stan::model::rvalue(T_row, "T_row",
                   stan::model::index_uni(c)) * scale_factor),
                "assigning variable T_i", stan::model::index_uni(rp1),
                                            stan::model::index_uni(c));
            }
            current_statement__ = 271;
            stan::model::assign(T_i,
              (stan::math::sqrt(
                 (1.0 -
                   stan::model::rvalue(rho, "rho",
                     stan::model::index_uni(rho_mark)))) * std_dev),
              "assigning variable T_i", stan::model::index_uni(rp1),
                                          stan::model::index_uni(rp1));
            current_statement__ = 272;
            rho_mark = (rho_mark + 1);
          }
          current_statement__ = 279;
          for (int c = 1; c <= nc; ++c) {
            current_statement__ = 278;
            for (int r = c; r <= nc; ++r) {
              current_statement__ = 275;
              stan::model::assign(theta_L,
                stan::model::rvalue(T_i, "T_i",
                  stan::model::index_uni(r), stan::model::index_uni(c)),
                "assigning variable theta_L", stan::model::index_uni(theta_L_mark));
              current_statement__ = 276;
              theta_L_mark = (theta_L_mark + 1);
            }
          }
        }
      }
      current_statement__ = 287;
      return theta_L;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  make_b(const T0__& z_b_arg__, const T1__& theta_L_arg__,
         const std::vector<int>& p, const std::vector<int>& l,
         std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& z_b = stan::math::to_ref(z_b_arg__);
    const auto& theta_L = stan::math::to_ref(theta_L_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 289;
      stan::math::validate_non_negative_index("b", "rows(z_b)",
                                              stan::math::rows(z_b));
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(z_b), DUMMY_VAR__);
      int b_mark = std::numeric_limits<int>::min();
      current_statement__ = 291;
      b_mark = 1;
      int theta_L_mark = std::numeric_limits<int>::min();
      current_statement__ = 292;
      theta_L_mark = 1;
      current_statement__ = 322;
      for (int i = 1; i <= stan::math::size(p); ++i) {
        int nc = std::numeric_limits<int>::min();
        current_statement__ = 293;
        nc = stan::model::rvalue(p, "p", stan::model::index_uni(i));
        current_statement__ = 320;
        if (stan::math::logical_eq(nc, 1)) {
          local_scalar_t__ theta_L_start = DUMMY_VAR__;
          current_statement__ = 314;
          theta_L_start = stan::model::rvalue(theta_L, "theta_L",
                            stan::model::index_uni(theta_L_mark));
          current_statement__ = 316;
          for (int s = b_mark;
               s <= ((b_mark +
                       stan::model::rvalue(l, "l", stan::model::index_uni(i)))
                      - 1);
               ++s) {
            current_statement__ = 315;
            stan::model::assign(b,
              (theta_L_start *
                stan::model::rvalue(z_b, "z_b", stan::model::index_uni(s))),
              "assigning variable b", stan::model::index_uni(s));
          }
          current_statement__ = 317;
          b_mark = (b_mark +
                     stan::model::rvalue(l, "l", stan::model::index_uni(i)));
          current_statement__ = 318;
          theta_L_mark = (theta_L_mark + 1);
        } else {
          current_statement__ = 294;
          stan::math::validate_non_negative_index("T_i", "nc", nc);
          current_statement__ = 295;
          stan::math::validate_non_negative_index("T_i", "nc", nc);
          Eigen::Matrix<local_scalar_t__, -1, -1> T_i =
             Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(nc, nc,
               DUMMY_VAR__);
          current_statement__ = 296;
          stan::model::assign(T_i, stan::math::rep_matrix(0, nc, nc),
            "assigning variable T_i");
          current_statement__ = 304;
          for (int c = 1; c <= nc; ++c) {
            current_statement__ = 297;
            stan::model::assign(T_i,
              stan::model::rvalue(theta_L, "theta_L",
                stan::model::index_uni(theta_L_mark)),
              "assigning variable T_i", stan::model::index_uni(c),
                                          stan::model::index_uni(c));
            current_statement__ = 298;
            theta_L_mark = (theta_L_mark + 1);
            current_statement__ = 302;
            for (int r = (c + 1); r <= nc; ++r) {
              current_statement__ = 299;
              stan::model::assign(T_i,
                stan::model::rvalue(theta_L, "theta_L",
                  stan::model::index_uni(theta_L_mark)),
                "assigning variable T_i", stan::model::index_uni(r),
                                            stan::model::index_uni(c));
              current_statement__ = 300;
              theta_L_mark = (theta_L_mark + 1);
            }
          }
          current_statement__ = 312;
          for (int j = 1;
               j <= stan::model::rvalue(l, "l", stan::model::index_uni(i));
               ++j) {
            current_statement__ = 305;
            stan::math::validate_non_negative_index("temp", "nc", nc);
            Eigen::Matrix<local_scalar_t__, -1, 1> temp =
               Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(nc,
                 DUMMY_VAR__);
            current_statement__ = 306;
            stan::model::assign(temp,
              stan::math::multiply(T_i, stan::math::segment(z_b, b_mark, nc)),
              "assigning variable temp");
            current_statement__ = 307;
            b_mark = (b_mark - 1);
            current_statement__ = 309;
            for (int s = 1; s <= nc; ++s) {
              current_statement__ = 308;
              stan::model::assign(b,
                stan::model::rvalue(temp, "temp", stan::model::index_uni(s)),
                "assigning variable b", stan::model::index_uni((b_mark + s)));
            }
            current_statement__ = 310;
            b_mark = (b_mark + (nc + 1));
          }
        }
      }
      current_statement__ = 323;
      return b;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T_lp__, typename T_lp_accum__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr,
          stan::require_stan_scalar_t<T6__>* = nullptr,
          stan::require_col_vector_t<T7__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<T5__, T6__,
                                          stan::value_type_t<T7__>>>
  decov_lp(const T0__& z_b_arg__, const T1__& z_T_arg__,
           const T2__& rho_arg__, const T3__& zeta_arg__,
           const T4__& tau_arg__, const std::vector<T5__>& regularization,
           const std::vector<T6__>& delta, const T7__& shape_arg__,
           const int& t, const std::vector<int>& p, T_lp__& lp__,
           T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>,
                                 stan::promote_args_t<T5__, T6__,
                                                      stan::value_type_t<T7__>>>;
    int current_statement__ = 0; 
    const auto& z_b = stan::math::to_ref(z_b_arg__);
    const auto& z_T = stan::math::to_ref(z_T_arg__);
    const auto& rho = stan::math::to_ref(rho_arg__);
    const auto& zeta = stan::math::to_ref(zeta_arg__);
    const auto& tau = stan::math::to_ref(tau_arg__);
    const auto& shape = stan::math::to_ref(shape_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos_reg = std::numeric_limits<int>::min();
      current_statement__ = 325;
      pos_reg = 1;
      int pos_rho = std::numeric_limits<int>::min();
      current_statement__ = 326;
      pos_rho = 1;
      current_statement__ = 327;
      lp_accum__.add(stan::math::normal_lpdf<false>(z_b, 0, 1));
      current_statement__ = 328;
      lp_accum__.add(stan::math::normal_lpdf<false>(z_T, 0, 1));
      current_statement__ = 346;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 345;
        if (stan::math::logical_gt(
              stan::model::rvalue(p, "p", stan::model::index_uni(i)), 1)) {
          current_statement__ = 329;
          stan::math::validate_non_negative_index("shape1", "p[i] - 1",
                                                  (stan::model::rvalue(p,
                                                     "p",
                                                     stan::model::index_uni(i))
                                                    - 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> shape1 =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
               (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1),
               DUMMY_VAR__);
          current_statement__ = 331;
          stan::math::validate_non_negative_index("shape2", "p[i] - 1",
                                                  (stan::model::rvalue(p,
                                                     "p",
                                                     stan::model::index_uni(i))
                                                    - 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> shape2 =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
               (stan::model::rvalue(p, "p", stan::model::index_uni(i)) - 1),
               DUMMY_VAR__);
          local_scalar_t__ nu = DUMMY_VAR__;
          current_statement__ = 333;
          nu = (stan::model::rvalue(regularization, "regularization",
                  stan::model::index_uni(pos_reg)) +
                 (0.5 *
                   (stan::model::rvalue(p, "p", stan::model::index_uni(i)) -
                     2)));
          current_statement__ = 334;
          pos_reg = (pos_reg + 1);
          current_statement__ = 335;
          stan::model::assign(shape1, nu,
            "assigning variable shape1", stan::model::index_uni(1));
          current_statement__ = 336;
          stan::model::assign(shape2, nu,
            "assigning variable shape2", stan::model::index_uni(1));
          current_statement__ = 341;
          for (int j = 2;
               j <= (stan::model::rvalue(p, "p", stan::model::index_uni(i)) -
                      1);
               ++j) {
            current_statement__ = 337;
            nu = (nu - 0.5);
            current_statement__ = 338;
            stan::model::assign(shape1, (0.5 * j),
              "assigning variable shape1", stan::model::index_uni(j));
            current_statement__ = 339;
            stan::model::assign(shape2, nu,
              "assigning variable shape2", stan::model::index_uni(j));
          }
          current_statement__ = 342;
          lp_accum__.add(
            stan::math::beta_lpdf<false>(
              stan::model::rvalue(rho, "rho",
                stan::model::index_min_max(pos_rho, ((pos_rho +
                                                       stan::model::rvalue(p,
                                                         "p",
                                                         stan::model::index_uni(i)))
                                                      - 2))), shape1, shape2));
          current_statement__ = 343;
          pos_rho = (pos_rho +
                      (stan::model::rvalue(p, "p", stan::model::index_uni(i))
                        - 1));
        } 
      }
      current_statement__ = 347;
      lp_accum__.add(stan::math::gamma_lpdf<false>(zeta, delta, 1));
      current_statement__ = 348;
      lp_accum__.add(stan::math::gamma_lpdf<false>(tau, shape, 1));
      current_statement__ = 349;
      return stan::math::get_lp(lp__, lp_accum__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
  hs_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
           const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
           const T3__& global_prior_scale, const T4__& error_scale,
           const T5__& c2, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& z_beta = stan::math::to_ref(z_beta_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int K = std::numeric_limits<int>::min();
      current_statement__ = 351;
      K = stan::math::rows(z_beta);
      current_statement__ = 352;
      stan::math::validate_non_negative_index("lambda", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 353;
      stan::model::assign(lambda,
        stan::math::elt_multiply(
          stan::model::rvalue(local, "local", stan::model::index_uni(1)),
          stan::math::sqrt(
            stan::model::rvalue(local, "local", stan::model::index_uni(2)))),
        "assigning variable lambda");
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 354;
      tau = (((stan::model::rvalue(global, "global",
                 stan::model::index_uni(1)) *
                stan::math::sqrt(
                  stan::model::rvalue(global, "global",
                    stan::model::index_uni(2)))) * global_prior_scale) *
              error_scale);
      current_statement__ = 355;
      stan::math::validate_non_negative_index("lambda2", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 356;
      stan::model::assign(lambda2, stan::math::square(lambda),
        "assigning variable lambda2");
      current_statement__ = 357;
      stan::math::validate_non_negative_index("lambda_tilde", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_tilde =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 358;
      stan::model::assign(lambda_tilde,
        stan::math::sqrt(
          stan::math::elt_divide(stan::math::multiply(c2, lambda2),
            stan::math::add(c2,
              stan::math::multiply(stan::math::square(tau), lambda2)))),
        "assigning variable lambda_tilde");
      current_statement__ = 359;
      return stan::math::multiply(
               stan::math::elt_multiply(z_beta, lambda_tilde), tau);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr,
          stan::require_stan_scalar_t<T4__>* = nullptr,
          stan::require_stan_scalar_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
  hsplus_prior(const T0__& z_beta_arg__, const std::vector<T1__>& global,
               const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
               const T3__& global_prior_scale, const T4__& error_scale,
               const T5__& c2, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__,
                                 T4__, stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& z_beta = stan::math::to_ref(z_beta_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int K = std::numeric_limits<int>::min();
      current_statement__ = 361;
      K = stan::math::rows(z_beta);
      current_statement__ = 362;
      stan::math::validate_non_negative_index("lambda", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 363;
      stan::model::assign(lambda,
        stan::math::elt_multiply(
          stan::model::rvalue(local, "local", stan::model::index_uni(1)),
          stan::math::sqrt(
            stan::model::rvalue(local, "local", stan::model::index_uni(2)))),
        "assigning variable lambda");
      current_statement__ = 364;
      stan::math::validate_non_negative_index("eta", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 365;
      stan::model::assign(eta,
        stan::math::elt_multiply(
          stan::model::rvalue(local, "local", stan::model::index_uni(3)),
          stan::math::sqrt(
            stan::model::rvalue(local, "local", stan::model::index_uni(4)))),
        "assigning variable eta");
      local_scalar_t__ tau = DUMMY_VAR__;
      current_statement__ = 366;
      tau = (((stan::model::rvalue(global, "global",
                 stan::model::index_uni(1)) *
                stan::math::sqrt(
                  stan::model::rvalue(global, "global",
                    stan::model::index_uni(2)))) * global_prior_scale) *
              error_scale);
      current_statement__ = 367;
      stan::math::validate_non_negative_index("lambda_eta2", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_eta2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 368;
      stan::model::assign(lambda_eta2,
        stan::math::square(stan::math::elt_multiply(lambda, eta)),
        "assigning variable lambda_eta2");
      current_statement__ = 369;
      stan::math::validate_non_negative_index("lambda_tilde", "K", K);
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_tilde =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      current_statement__ = 370;
      stan::model::assign(lambda_tilde,
        stan::math::sqrt(
          stan::math::elt_divide(stan::math::multiply(c2, lambda_eta2),
            stan::math::add(c2,
              stan::math::multiply(stan::math::square(tau), lambda_eta2)))),
        "assigning variable lambda_tilde");
      current_statement__ = 371;
      return stan::math::multiply(
               stan::math::elt_multiply(z_beta, lambda_tilde), tau);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  CFt(const T0__& z, const T1__& df, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ z2 = DUMMY_VAR__;
      current_statement__ = 373;
      z2 = stan::math::square(z);
      local_scalar_t__ z3 = DUMMY_VAR__;
      current_statement__ = 374;
      z3 = (z2 * z);
      local_scalar_t__ z5 = DUMMY_VAR__;
      current_statement__ = 375;
      z5 = (z2 * z3);
      local_scalar_t__ z7 = DUMMY_VAR__;
      current_statement__ = 376;
      z7 = (z2 * z5);
      local_scalar_t__ z9 = DUMMY_VAR__;
      current_statement__ = 377;
      z9 = (z2 * z7);
      local_scalar_t__ df2 = DUMMY_VAR__;
      current_statement__ = 378;
      df2 = stan::math::square(df);
      local_scalar_t__ df3 = DUMMY_VAR__;
      current_statement__ = 379;
      df3 = (df2 * df);
      local_scalar_t__ df4 = DUMMY_VAR__;
      current_statement__ = 380;
      df4 = (df2 * df2);
      current_statement__ = 381;
      return ((((z + ((z3 + z) / (4 * df))) +
                 ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) +
                (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) /
                  (384 * df3))) +
               ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) -
                  (945 * z)) / (92160 * df4)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T2__, typename T5__,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T2__>, stan::value_type_t<T5__>>, -1, 1>
  csr_matrix_times_vector2(const int& m, const int& n, const T2__& w_arg__,
                           const std::vector<int>& v,
                           const std::vector<int>& u, const T5__& b_arg__,
                           std::ostream* pstream__) ; 
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>, T2__>, -1, 1>
  pw_gauss(const T0__& y_arg__, const T1__& eta_arg__, const T2__& sigma,
           std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>, T2__>;
    int current_statement__ = 0; 
    const auto& y = stan::math::to_ref(y_arg__);
    const auto& eta = stan::math::to_ref(eta_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 383;
      return stan::math::subtract(
               (-0.5 *
                 stan::math::log(((6.283185307179586232 * sigma) * sigma))),
               stan::math::divide(
                 stan::math::multiply(0.5,
                   stan::math::square(stan::math::subtract(y, eta))),
                 (sigma * sigma)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, stan::require_col_vector_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
hs_prior_functor__::operator()(const T0__& z_beta,
                               const std::vector<T1__>& global,
                               const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
                               const T3__& global_prior_scale,
                               const T4__& error_scale, const T5__& c2,
                               std::ostream* pstream__)  const
{
  return hs_prior(z_beta, global, local, global_prior_scale, error_scale, c2,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>, T2__>, -1, 1>
pw_gauss_functor__::operator()(const T0__& y, const T1__& eta,
                               const T2__& sigma, std::ostream* pstream__) 
const
{
  return pw_gauss(y, eta, sigma, pstream__);
}

template <typename T0__, typename T1__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*>
stan::promote_args_t<T0__, T1__>
CFt_functor__::operator()(const T0__& z, const T1__& df,
                          std::ostream* pstream__)  const
{
  return CFt(z, df, pstream__);
}

template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T_lp__, typename T_lp_accum__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*,
          stan::require_stan_scalar_t<T6__>*,
          stan::require_col_vector_t<T7__>*>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<T5__, T6__,
                                          stan::value_type_t<T7__>>>
decov_lp_functor__::operator()(const T0__& z_b, const T1__& z_T,
                               const T2__& rho, const T3__& zeta,
                               const T4__& tau,
                               const std::vector<T5__>& regularization,
                               const std::vector<T6__>& delta,
                               const T7__& shape, const int& t,
                               const std::vector<int>& p, T_lp__& lp__,
                               T_lp_accum__& lp_accum__,
                               std::ostream* pstream__)  const
{
  return decov_lp<propto__>(z_b, z_T, rho, zeta, tau, regularization, delta,
           shape, t, p, lp__, lp_accum__, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, stan::require_col_vector_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*,
          stan::require_stan_scalar_t<T4__>*,
          stan::require_stan_scalar_t<T5__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, T1__, T2__, T3__, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
hsplus_prior_functor__::operator()(const T0__& z_beta,
                                   const std::vector<T1__>& global,
                                   const std::vector<Eigen::Matrix<T2__, -1, 1>>& local,
                                   const T3__& global_prior_scale,
                                   const T4__& error_scale, const T5__& c2,
                                   std::ostream* pstream__)  const
{
  return hsplus_prior(z_beta, global, local, global_prior_scale, error_scale,
           c2, pstream__);
}

template <typename T0__, typename T1__, stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
make_b_functor__::operator()(const T0__& z_b, const T1__& theta_L,
                             const std::vector<int>& p,
                             const std::vector<int>& l,
                             std::ostream* pstream__)  const
{
  return make_b(z_b, theta_L, p, l, pstream__);
}

template <typename T2__, typename T3__, typename T4__, typename T5__,
          typename T6__, typename T7__, stan::require_stan_scalar_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*,
          stan::require_col_vector_t<T5__>*,
          stan::require_col_vector_t<T6__>*,
          stan::require_col_vector_t<T7__>*>
Eigen::Matrix<stan::promote_args_t<T2__, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>, stan::value_type_t<T5__>,
                     stan::value_type_t<T6__>,
                     stan::promote_args_t<stan::value_type_t<T7__>>>, -1, 1>
make_theta_L_functor__::operator()(const int& len_theta_L,
                                   const std::vector<int>& p,
                                   const T2__& dispersion, const T3__& tau,
                                   const T4__& scale, const T5__& zeta,
                                   const T6__& rho, const T7__& z_T,
                                   std::ostream* pstream__)  const
{
  return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T,
           pstream__);
}

 class continuous_model final : public model_base_crtp<continuous_model> {

 private:
  int N;
  int K;
  Eigen::Matrix<double, -1, -1> X__;
  int len_y;
  double lb_y;
  double ub_y;
  Eigen::Matrix<double, -1, 1> y__;
  int has_intercept;
  int is_binary;
  int prior_dist;
  int prior_dist_for_intercept;
  int prior_dist_for_aux;
  int has_weights;
  Eigen::Matrix<double, -1, 1> weights__;
  Eigen::Matrix<double, -1, 1> offset___;
  Eigen::Matrix<double, -1, 1> prior_scale__;
  double prior_scale_for_intercept;
  double prior_scale_for_aux;
  Eigen::Matrix<double, -1, 1> prior_mean__;
  double prior_mean_for_intercept;
  double prior_mean_for_aux;
  Eigen::Matrix<double, -1, 1> prior_df__;
  double prior_df_for_intercept;
  double prior_df_for_aux;
  double global_prior_df;
  double global_prior_scale;
  double slab_df;
  double slab_scale;
  std::vector<int> num_normals;
  int t;
  std::vector<int> p;
  std::vector<int> l;
  int q;
  int len_theta_L;
  Eigen::Matrix<double, -1, 1> shape__;
  Eigen::Matrix<double, -1, 1> scale__;
  int len_concentration;
  std::vector<double> concentration;
  int len_regularization;
  std::vector<double> regularization;
  int num_non_zero;
  Eigen::Matrix<double, -1, 1> w__;
  std::vector<int> v;
  std::vector<int> u;
  int len_z_T;
  int len_var_group;
  int len_rho;
  int pos;
  std::vector<double> delta;
  int hs;
  int z_beta_1dim__;
  int caux_1dim__;
  int mix_1dim__;
  int one_over_lambda_1dim__;
  int aux_unscaled_1dim__;
  int aux_1dim__; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> X{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> weights{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> offset_{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> prior_scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> prior_mean{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> prior_df{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> shape{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> scale{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> w{nullptr, 0};
 
 public:
  ~continuous_model() { }
  
  inline std::string model_name() const final { return "continuous_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = --allow-undefined --print-cpp"};
  }
  
  
  continuous_model(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "continuous_model_namespace::continuous_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 132;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 132;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 133;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 133;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "K", K, 0);
      current_statement__ = 134;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("X", "K", K);
      current_statement__ = 136;
      context__.validate_dims("data initialization","X","double",
           std::vector<size_t>{static_cast<size_t>(N),
            static_cast<size_t>(K)});
      X__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N, K,
          std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double, -1, -1>>(X__.data(), N, K);
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 136;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 136;
        pos__ = 1;
        current_statement__ = 136;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 136;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 136;
            stan::model::assign(X, X_flat__[(pos__ - 1)],
              "assigning variable X", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 136;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 137;
      context__.validate_dims("data initialization","len_y","int",
           std::vector<size_t>{});
      len_y = std::numeric_limits<int>::min();
      
      
      current_statement__ = 137;
      len_y = context__.vals_i("len_y")[(1 - 1)];
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "len_y", len_y, 0);
      current_statement__ = 138;
      context__.validate_dims("data initialization","lb_y","double",
           std::vector<size_t>{});
      lb_y = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 138;
      lb_y = context__.vals_r("lb_y")[(1 - 1)];
      current_statement__ = 139;
      context__.validate_dims("data initialization","ub_y","double",
           std::vector<size_t>{});
      ub_y = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 139;
      ub_y = context__.vals_r("ub_y")[(1 - 1)];
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "ub_y", ub_y, lb_y);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("y", "len_y", len_y);
      current_statement__ = 141;
      context__.validate_dims("data initialization","y","double",
           std::vector<size_t>{static_cast<size_t>(len_y)});
      y__ = 
        Eigen::Matrix<double, -1, 1>::Constant(len_y,
          std::numeric_limits<double>::quiet_NaN());
      new (&y) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y__.data(), len_y);
      
      {
        std::vector<local_scalar_t__> y_flat__;
        current_statement__ = 141;
        y_flat__ = context__.vals_r("y");
        current_statement__ = 141;
        pos__ = 1;
        current_statement__ = 141;
        for (int sym1__ = 1; sym1__ <= len_y; ++sym1__) {
          current_statement__ = 141;
          stan::model::assign(y, y_flat__[(pos__ - 1)],
            "assigning variable y", stan::model::index_uni(sym1__));
          current_statement__ = 141;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "y", y, lb_y);
      current_statement__ = 141;
      stan::math::check_less_or_equal(function__, "y", y, ub_y);
      current_statement__ = 142;
      context__.validate_dims("data initialization","has_intercept","int",
           std::vector<size_t>{});
      has_intercept = std::numeric_limits<int>::min();
      
      
      current_statement__ = 142;
      has_intercept = context__.vals_i("has_intercept")[(1 - 1)];
      current_statement__ = 142;
      stan::math::check_greater_or_equal(function__, "has_intercept",
                                            has_intercept, 0);
      current_statement__ = 142;
      stan::math::check_less_or_equal(function__, "has_intercept",
                                         has_intercept, 1);
      current_statement__ = 143;
      context__.validate_dims("data initialization","is_binary","int",
           std::vector<size_t>{});
      is_binary = std::numeric_limits<int>::min();
      
      
      current_statement__ = 143;
      is_binary = context__.vals_i("is_binary")[(1 - 1)];
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "is_binary", is_binary,
                                            0);
      current_statement__ = 143;
      stan::math::check_less_or_equal(function__, "is_binary", is_binary, 1);
      current_statement__ = 144;
      context__.validate_dims("data initialization","prior_dist","int",
           std::vector<size_t>{});
      prior_dist = std::numeric_limits<int>::min();
      
      
      current_statement__ = 144;
      prior_dist = context__.vals_i("prior_dist")[(1 - 1)];
      current_statement__ = 144;
      stan::math::check_greater_or_equal(function__, "prior_dist",
                                            prior_dist, 0);
      current_statement__ = 144;
      stan::math::check_less_or_equal(function__, "prior_dist", prior_dist, 7);
      current_statement__ = 145;
      context__.validate_dims("data initialization",
          "prior_dist_for_intercept","int", std::vector<size_t>{});
      prior_dist_for_intercept = std::numeric_limits<int>::min();
      
      
      current_statement__ = 145;
      prior_dist_for_intercept = context__.vals_i("prior_dist_for_intercept")[
          (1 - 1)];
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "prior_dist_for_intercept",
                                            prior_dist_for_intercept, 0);
      current_statement__ = 145;
      stan::math::check_less_or_equal(function__, "prior_dist_for_intercept",
                                         prior_dist_for_intercept, 2);
      current_statement__ = 146;
      context__.validate_dims("data initialization","prior_dist_for_aux",
          "int", std::vector<size_t>{});
      prior_dist_for_aux = std::numeric_limits<int>::min();
      
      
      current_statement__ = 146;
      prior_dist_for_aux = context__.vals_i("prior_dist_for_aux")[(1 - 1)];
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__, "prior_dist_for_aux",
                                            prior_dist_for_aux, 0);
      current_statement__ = 146;
      stan::math::check_less_or_equal(function__, "prior_dist_for_aux",
                                         prior_dist_for_aux, 3);
      current_statement__ = 147;
      context__.validate_dims("data initialization","has_weights","int",
           std::vector<size_t>{});
      has_weights = std::numeric_limits<int>::min();
      
      
      current_statement__ = 147;
      has_weights = context__.vals_i("has_weights")[(1 - 1)];
      current_statement__ = 147;
      stan::math::check_greater_or_equal(function__, "has_weights",
                                            has_weights, 0);
      current_statement__ = 147;
      stan::math::check_less_or_equal(function__, "has_weights", has_weights,
                                         1);
      current_statement__ = 148;
      stan::math::validate_non_negative_index("weights",
                                              "has_weights ? N : 0",
                                              (has_weights ? N : 0));
      current_statement__ = 149;
      context__.validate_dims("data initialization","weights","double",
           std::vector<size_t>{static_cast<size_t>((has_weights ? N : 0))});
      weights__ = 
        Eigen::Matrix<double, -1, 1>::Constant((has_weights ? N : 0),
          std::numeric_limits<double>::quiet_NaN());
      new (&weights) Eigen::Map<Eigen::Matrix<double, -1, 1>>(weights__.data(), (
        has_weights ? N : 0));
      
      {
        std::vector<local_scalar_t__> weights_flat__;
        current_statement__ = 149;
        weights_flat__ = context__.vals_r("weights");
        current_statement__ = 149;
        pos__ = 1;
        current_statement__ = 149;
        for (int sym1__ = 1; sym1__ <= (has_weights ? N : 0); ++sym1__) {
          current_statement__ = 149;
          stan::model::assign(weights, weights_flat__[(pos__ - 1)],
            "assigning variable weights", stan::model::index_uni(sym1__));
          current_statement__ = 149;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 150;
      stan::math::validate_non_negative_index("offset_", "N", N);
      current_statement__ = 151;
      context__.validate_dims("data initialization","offset_","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      offset___ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&offset_) Eigen::Map<Eigen::Matrix<double, -1, 1>>(offset___.data(), N);
        
      
      {
        std::vector<local_scalar_t__> offset__flat__;
        current_statement__ = 151;
        offset__flat__ = context__.vals_r("offset_");
        current_statement__ = 151;
        pos__ = 1;
        current_statement__ = 151;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 151;
          stan::model::assign(offset_, offset__flat__[(pos__ - 1)],
            "assigning variable offset_", stan::model::index_uni(sym1__));
          current_statement__ = 151;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 152;
      stan::math::validate_non_negative_index("prior_scale", "K", K);
      current_statement__ = 153;
      context__.validate_dims("data initialization","prior_scale","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      prior_scale__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&prior_scale) Eigen::Map<Eigen::Matrix<double, -1, 1>>(prior_scale__.data(), K);
        
      
      {
        std::vector<local_scalar_t__> prior_scale_flat__;
        current_statement__ = 153;
        prior_scale_flat__ = context__.vals_r("prior_scale");
        current_statement__ = 153;
        pos__ = 1;
        current_statement__ = 153;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 153;
          stan::model::assign(prior_scale, prior_scale_flat__[(pos__ - 1)],
            "assigning variable prior_scale", stan::model::index_uni(sym1__));
          current_statement__ = 153;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "prior_scale",
                                            prior_scale, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization",
          "prior_scale_for_intercept","double", std::vector<size_t>{});
      prior_scale_for_intercept = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 154;
      prior_scale_for_intercept = context__.vals_r("prior_scale_for_intercept")[
          (1 - 1)];
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "prior_scale_for_intercept",
                                            prior_scale_for_intercept, 0);
      current_statement__ = 155;
      context__.validate_dims("data initialization","prior_scale_for_aux",
          "double", std::vector<size_t>{});
      prior_scale_for_aux = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 155;
      prior_scale_for_aux = context__.vals_r("prior_scale_for_aux")[(1 - 1)];
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "prior_scale_for_aux",
                                            prior_scale_for_aux, 0);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("prior_mean", "K", K);
      current_statement__ = 157;
      context__.validate_dims("data initialization","prior_mean","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      prior_mean__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&prior_mean) Eigen::Map<Eigen::Matrix<double, -1, 1>>(prior_mean__.data(), K);
        
      
      {
        std::vector<local_scalar_t__> prior_mean_flat__;
        current_statement__ = 157;
        prior_mean_flat__ = context__.vals_r("prior_mean");
        current_statement__ = 157;
        pos__ = 1;
        current_statement__ = 157;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 157;
          stan::model::assign(prior_mean, prior_mean_flat__[(pos__ - 1)],
            "assigning variable prior_mean", stan::model::index_uni(sym1__));
          current_statement__ = 157;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 158;
      context__.validate_dims("data initialization",
          "prior_mean_for_intercept","double", std::vector<size_t>{});
      prior_mean_for_intercept = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 158;
      prior_mean_for_intercept = context__.vals_r("prior_mean_for_intercept")[
          (1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization","prior_mean_for_aux",
          "double", std::vector<size_t>{});
      prior_mean_for_aux = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 159;
      prior_mean_for_aux = context__.vals_r("prior_mean_for_aux")[(1 - 1)];
      current_statement__ = 159;
      stan::math::check_greater_or_equal(function__, "prior_mean_for_aux",
                                            prior_mean_for_aux, 0);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("prior_df", "K", K);
      current_statement__ = 161;
      context__.validate_dims("data initialization","prior_df","double",
           std::vector<size_t>{static_cast<size_t>(K)});
      prior_df__ = 
        Eigen::Matrix<double, -1, 1>::Constant(K,
          std::numeric_limits<double>::quiet_NaN());
      new (&prior_df) Eigen::Map<Eigen::Matrix<double, -1, 1>>(prior_df__.data(), K);
        
      
      {
        std::vector<local_scalar_t__> prior_df_flat__;
        current_statement__ = 161;
        prior_df_flat__ = context__.vals_r("prior_df");
        current_statement__ = 161;
        pos__ = 1;
        current_statement__ = 161;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 161;
          stan::model::assign(prior_df, prior_df_flat__[(pos__ - 1)],
            "assigning variable prior_df", stan::model::index_uni(sym1__));
          current_statement__ = 161;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__, "prior_df", prior_df, 0);
      current_statement__ = 162;
      context__.validate_dims("data initialization","prior_df_for_intercept",
          "double", std::vector<size_t>{});
      prior_df_for_intercept = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 162;
      prior_df_for_intercept = context__.vals_r("prior_df_for_intercept")[
          (1 - 1)];
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "prior_df_for_intercept",
                                            prior_df_for_intercept, 0);
      current_statement__ = 163;
      context__.validate_dims("data initialization","prior_df_for_aux",
          "double", std::vector<size_t>{});
      prior_df_for_aux = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 163;
      prior_df_for_aux = context__.vals_r("prior_df_for_aux")[(1 - 1)];
      current_statement__ = 163;
      stan::math::check_greater_or_equal(function__, "prior_df_for_aux",
                                            prior_df_for_aux, 0);
      current_statement__ = 164;
      context__.validate_dims("data initialization","global_prior_df",
          "double", std::vector<size_t>{});
      global_prior_df = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 164;
      global_prior_df = context__.vals_r("global_prior_df")[(1 - 1)];
      current_statement__ = 164;
      stan::math::check_greater_or_equal(function__, "global_prior_df",
                                            global_prior_df, 0);
      current_statement__ = 165;
      context__.validate_dims("data initialization","global_prior_scale",
          "double", std::vector<size_t>{});
      global_prior_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 165;
      global_prior_scale = context__.vals_r("global_prior_scale")[(1 - 1)];
      current_statement__ = 165;
      stan::math::check_greater_or_equal(function__, "global_prior_scale",
                                            global_prior_scale, 0);
      current_statement__ = 166;
      context__.validate_dims("data initialization","slab_df","double",
           std::vector<size_t>{});
      slab_df = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 166;
      slab_df = context__.vals_r("slab_df")[(1 - 1)];
      current_statement__ = 166;
      stan::math::check_greater_or_equal(function__, "slab_df", slab_df, 0);
      current_statement__ = 167;
      context__.validate_dims("data initialization","slab_scale","double",
           std::vector<size_t>{});
      slab_scale = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 167;
      slab_scale = context__.vals_r("slab_scale")[(1 - 1)];
      current_statement__ = 167;
      stan::math::check_greater_or_equal(function__, "slab_scale",
                                            slab_scale, 0);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("num_normals",
                                              "prior_dist == 7 ? K : 0",
                                              (
                                                 stan::math::logical_eq(
                                                   prior_dist, 7) ? K : 0));
      current_statement__ = 169;
      context__.validate_dims("data initialization","num_normals","int",
           std::vector<size_t>{
            static_cast<size_t>((stan::math::logical_eq(prior_dist, 7) ? K :
                                   0))});
      num_normals = 
        std::vector<int>((stan::math::logical_eq(prior_dist, 7) ? K : 0), 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 169;
      num_normals = context__.vals_i("num_normals");
      current_statement__ = 169;
      stan::math::check_greater_or_equal(function__, "num_normals",
                                            num_normals, 2);
      current_statement__ = 170;
      context__.validate_dims("data initialization","t","int",
           std::vector<size_t>{});
      t = std::numeric_limits<int>::min();
      
      
      current_statement__ = 170;
      t = context__.vals_i("t")[(1 - 1)];
      current_statement__ = 170;
      stan::math::check_greater_or_equal(function__, "t", t, 0);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("p", "t", t);
      current_statement__ = 172;
      context__.validate_dims("data initialization","p","int",
           std::vector<size_t>{static_cast<size_t>(t)});
      p = std::vector<int>(t, std::numeric_limits<int>::min());
      
      
      current_statement__ = 172;
      p = context__.vals_i("p");
      current_statement__ = 172;
      stan::math::check_greater_or_equal(function__, "p", p, 1);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("l", "t", t);
      current_statement__ = 174;
      context__.validate_dims("data initialization","l","int",
           std::vector<size_t>{static_cast<size_t>(t)});
      l = std::vector<int>(t, std::numeric_limits<int>::min());
      
      
      current_statement__ = 174;
      l = context__.vals_i("l");
      current_statement__ = 174;
      stan::math::check_greater_or_equal(function__, "l", l, 1);
      current_statement__ = 175;
      context__.validate_dims("data initialization","q","int",
           std::vector<size_t>{});
      q = std::numeric_limits<int>::min();
      
      
      current_statement__ = 175;
      q = context__.vals_i("q")[(1 - 1)];
      current_statement__ = 175;
      stan::math::check_greater_or_equal(function__, "q", q, 0);
      current_statement__ = 176;
      context__.validate_dims("data initialization","len_theta_L","int",
           std::vector<size_t>{});
      len_theta_L = std::numeric_limits<int>::min();
      
      
      current_statement__ = 176;
      len_theta_L = context__.vals_i("len_theta_L")[(1 - 1)];
      current_statement__ = 176;
      stan::math::check_greater_or_equal(function__, "len_theta_L",
                                            len_theta_L, 0);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("shape", "t", t);
      current_statement__ = 178;
      context__.validate_dims("data initialization","shape","double",
           std::vector<size_t>{static_cast<size_t>(t)});
      shape__ = 
        Eigen::Matrix<double, -1, 1>::Constant(t,
          std::numeric_limits<double>::quiet_NaN());
      new (&shape) Eigen::Map<Eigen::Matrix<double, -1, 1>>(shape__.data(), t);
        
      
      {
        std::vector<local_scalar_t__> shape_flat__;
        current_statement__ = 178;
        shape_flat__ = context__.vals_r("shape");
        current_statement__ = 178;
        pos__ = 1;
        current_statement__ = 178;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 178;
          stan::model::assign(shape, shape_flat__[(pos__ - 1)],
            "assigning variable shape", stan::model::index_uni(sym1__));
          current_statement__ = 178;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 178;
      stan::math::check_greater_or_equal(function__, "shape", shape, 0);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("scale", "t", t);
      current_statement__ = 180;
      context__.validate_dims("data initialization","scale","double",
           std::vector<size_t>{static_cast<size_t>(t)});
      scale__ = 
        Eigen::Matrix<double, -1, 1>::Constant(t,
          std::numeric_limits<double>::quiet_NaN());
      new (&scale) Eigen::Map<Eigen::Matrix<double, -1, 1>>(scale__.data(), t);
        
      
      {
        std::vector<local_scalar_t__> scale_flat__;
        current_statement__ = 180;
        scale_flat__ = context__.vals_r("scale");
        current_statement__ = 180;
        pos__ = 1;
        current_statement__ = 180;
        for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
          current_statement__ = 180;
          stan::model::assign(scale, scale_flat__[(pos__ - 1)],
            "assigning variable scale", stan::model::index_uni(sym1__));
          current_statement__ = 180;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 180;
      stan::math::check_greater_or_equal(function__, "scale", scale, 0);
      current_statement__ = 181;
      context__.validate_dims("data initialization","len_concentration",
          "int", std::vector<size_t>{});
      len_concentration = std::numeric_limits<int>::min();
      
      
      current_statement__ = 181;
      len_concentration = context__.vals_i("len_concentration")[(1 - 1)];
      current_statement__ = 181;
      stan::math::check_greater_or_equal(function__, "len_concentration",
                                            len_concentration, 0);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("concentration",
                                              "len_concentration",
                                              len_concentration);
      current_statement__ = 183;
      context__.validate_dims("data initialization","concentration","double",
           std::vector<size_t>{static_cast<size_t>(len_concentration)});
      concentration = 
        std::vector<double>(len_concentration, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 183;
      concentration = context__.vals_r("concentration");
      current_statement__ = 183;
      stan::math::check_greater_or_equal(function__, "concentration",
                                            concentration, 0);
      current_statement__ = 184;
      context__.validate_dims("data initialization","len_regularization",
          "int", std::vector<size_t>{});
      len_regularization = std::numeric_limits<int>::min();
      
      
      current_statement__ = 184;
      len_regularization = context__.vals_i("len_regularization")[(1 - 1)];
      current_statement__ = 184;
      stan::math::check_greater_or_equal(function__, "len_regularization",
                                            len_regularization, 0);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("regularization",
                                              "len_regularization",
                                              len_regularization);
      current_statement__ = 186;
      context__.validate_dims("data initialization","regularization",
          "double",
           std::vector<size_t>{static_cast<size_t>(len_regularization)});
      regularization = 
        std::vector<double>(len_regularization, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 186;
      regularization = context__.vals_r("regularization");
      current_statement__ = 186;
      stan::math::check_greater_or_equal(function__, "regularization",
                                            regularization, 0);
      current_statement__ = 187;
      context__.validate_dims("data initialization","num_non_zero","int",
           std::vector<size_t>{});
      num_non_zero = std::numeric_limits<int>::min();
      
      
      current_statement__ = 187;
      num_non_zero = context__.vals_i("num_non_zero")[(1 - 1)];
      current_statement__ = 187;
      stan::math::check_greater_or_equal(function__, "num_non_zero",
                                            num_non_zero, 0);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("w", "num_non_zero",
                                              num_non_zero);
      current_statement__ = 189;
      context__.validate_dims("data initialization","w","double",
           std::vector<size_t>{static_cast<size_t>(num_non_zero)});
      w__ = 
        Eigen::Matrix<double, -1, 1>::Constant(num_non_zero,
          std::numeric_limits<double>::quiet_NaN());
      new (&w) Eigen::Map<Eigen::Matrix<double, -1, 1>>(w__.data(), num_non_zero);
        
      
      {
        std::vector<local_scalar_t__> w_flat__;
        current_statement__ = 189;
        w_flat__ = context__.vals_r("w");
        current_statement__ = 189;
        pos__ = 1;
        current_statement__ = 189;
        for (int sym1__ = 1; sym1__ <= num_non_zero; ++sym1__) {
          current_statement__ = 189;
          stan::model::assign(w, w_flat__[(pos__ - 1)],
            "assigning variable w", stan::model::index_uni(sym1__));
          current_statement__ = 189;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 190;
      stan::math::validate_non_negative_index("v", "num_non_zero",
                                              num_non_zero);
      current_statement__ = 191;
      context__.validate_dims("data initialization","v","int",
           std::vector<size_t>{static_cast<size_t>(num_non_zero)});
      v = std::vector<int>(num_non_zero, std::numeric_limits<int>::min());
      
      
      current_statement__ = 191;
      v = context__.vals_i("v");
      current_statement__ = 191;
      stan::math::check_greater_or_equal(function__, "v", v, 0);
      current_statement__ = 191;
      stan::math::check_less_or_equal(function__, "v", v, (q - 1));
      current_statement__ = 192;
      stan::math::validate_non_negative_index("u", "N + 1", (N + 1));
      current_statement__ = 193;
      context__.validate_dims("data initialization","u","int",
           std::vector<size_t>{static_cast<size_t>((N + 1))});
      u = std::vector<int>((N + 1), std::numeric_limits<int>::min());
      
      
      current_statement__ = 193;
      u = context__.vals_i("u");
      current_statement__ = 193;
      stan::math::check_greater_or_equal(function__, "u", u, 0);
      current_statement__ = 193;
      stan::math::check_less_or_equal(function__, "u", u,
                                         (stan::math::rows(w) + 1));
      current_statement__ = 194;
      len_z_T = std::numeric_limits<int>::min();
      
      
      current_statement__ = 194;
      len_z_T = 0;
      current_statement__ = 195;
      len_var_group = std::numeric_limits<int>::min();
      
      
      current_statement__ = 195;
      len_var_group = stan::math::sum(p);
      current_statement__ = 196;
      len_rho = std::numeric_limits<int>::min();
      
      
      current_statement__ = 196;
      len_rho = (stan::math::sum(p) - t);
      current_statement__ = 197;
      pos = std::numeric_limits<int>::min();
      
      
      current_statement__ = 197;
      pos = 1;
      current_statement__ = 198;
      stan::math::validate_non_negative_index("delta", "len_concentration",
                                              len_concentration);
      current_statement__ = 199;
      delta = 
        std::vector<double>(len_concentration, 
          std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 200;
      hs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 207;
      if (stan::math::logical_lte(prior_dist, 2)) {
        current_statement__ = 206;
        hs = 0;
      } else {
        current_statement__ = 205;
        if (stan::math::logical_eq(prior_dist, 3)) {
          current_statement__ = 204;
          hs = 2;
        } else {
          current_statement__ = 203;
          if (stan::math::logical_eq(prior_dist, 4)) {
            current_statement__ = 202;
            hs = 4;
          } else {
            current_statement__ = 201;
            hs = 0;
          }
        }
      }
      current_statement__ = 217;
      for (int i = 1; i <= t; ++i) {
        current_statement__ = 213;
        if (stan::math::logical_gt(
              stan::model::rvalue(p, "p", stan::model::index_uni(i)), 1)) {
          current_statement__ = 211;
          for (int j = 1;
               j <= stan::model::rvalue(p, "p", stan::model::index_uni(i));
               ++j) {
            current_statement__ = 208;
            stan::model::assign(delta,
              stan::model::rvalue(concentration, "concentration",
                stan::model::index_uni(j)),
              "assigning variable delta", stan::model::index_uni(pos));
            current_statement__ = 209;
            pos = (pos + 1);
          }
        } 
        current_statement__ = 215;
        for (int j = 3;
             j <= stan::model::rvalue(p, "p", stan::model::index_uni(i)); ++j) {
          current_statement__ = 214;
          len_z_T = (len_z_T +
                      (stan::model::rvalue(p, "p", stan::model::index_uni(i))
                        - 1));
        }
      }
      current_statement__ = 194;
      stan::math::check_greater_or_equal(function__, "len_z_T", len_z_T, 0);
      current_statement__ = 195;
      stan::math::check_greater_or_equal(function__, "len_var_group",
                                            len_var_group, 0);
      current_statement__ = 196;
      stan::math::check_greater_or_equal(function__, "len_rho", len_rho, 0);
      current_statement__ = 197;
      stan::math::check_greater_or_equal(function__, "pos", pos, 1);
      current_statement__ = 199;
      stan::math::check_greater_or_equal(function__, "delta", delta, 0);
      current_statement__ = 200;
      stan::math::check_greater_or_equal(function__, "hs", hs, 0);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("gamma", "has_intercept",
                                              has_intercept);
      current_statement__ = 219;
      z_beta_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 219;
      z_beta_1dim__ = (stan::math::logical_eq(prior_dist, 7) ?
                         stan::math::sum(num_normals) : K);
      current_statement__ = 219;
      stan::math::validate_non_negative_index("z_beta",
                                              "prior_dist == 7 ? sum(num_normals) : K",
                                              z_beta_1dim__);
      current_statement__ = 220;
      stan::math::validate_non_negative_index("global", "hs", hs);
      current_statement__ = 221;
      stan::math::validate_non_negative_index("local", "hs", hs);
      current_statement__ = 222;
      stan::math::validate_non_negative_index("local", "K", K);
      current_statement__ = 223;
      caux_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 223;
      caux_1dim__ = stan::math::logical_gt(hs, 0);
      current_statement__ = 223;
      stan::math::validate_non_negative_index("caux", "hs > 0", caux_1dim__);
      current_statement__ = 224;
      mix_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 224;
      mix_1dim__ = (stan::math::primitive_value(
          stan::math::logical_eq(prior_dist, 5)) ||
          stan::math::primitive_value(
          stan::math::logical_eq(prior_dist, 6)));
      current_statement__ = 224;
      stan::math::validate_non_negative_index("mix",
                                              "prior_dist == 5 || prior_dist == 6",
                                              mix_1dim__);
      current_statement__ = 225;
      stan::math::validate_non_negative_index("mix", "K", K);
      current_statement__ = 226;
      one_over_lambda_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 226;
      one_over_lambda_1dim__ = stan::math::logical_eq(prior_dist, 6);
      current_statement__ = 226;
      stan::math::validate_non_negative_index("one_over_lambda",
                                              "prior_dist == 6",
                                              one_over_lambda_1dim__);
      current_statement__ = 227;
      stan::math::validate_non_negative_index("z_b", "q", q);
      current_statement__ = 228;
      stan::math::validate_non_negative_index("z_T", "len_z_T", len_z_T);
      current_statement__ = 229;
      stan::math::validate_non_negative_index("rho", "len_rho", len_rho);
      current_statement__ = 230;
      stan::math::validate_non_negative_index("zeta", "len_concentration",
                                              len_concentration);
      current_statement__ = 231;
      stan::math::validate_non_negative_index("tau", "t", t);
      current_statement__ = 232;
      aux_unscaled_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 232;
      aux_unscaled_1dim__ = stan::math::logical_negation(is_binary);
      current_statement__ = 233;
      stan::math::validate_non_negative_index("aux_unscaled", "!is_binary",
                                              aux_unscaled_1dim__);
      current_statement__ = 234;
      aux_1dim__ = std::numeric_limits<int>::min();
      
      
      current_statement__ = 234;
      aux_1dim__ = stan::math::logical_negation(is_binary);
      current_statement__ = 235;
      stan::math::validate_non_negative_index("aux", "!is_binary", aux_1dim__);
      current_statement__ = 236;
      stan::math::validate_non_negative_index("beta", "K", K);
      current_statement__ = 237;
      stan::math::validate_non_negative_index("b", "q", q);
      current_statement__ = 238;
      stan::math::validate_non_negative_index("theta_L", "len_theta_L",
                                              len_theta_L);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = has_intercept + z_beta_1dim__ + hs + (hs * K)
       + caux_1dim__ + (mix_1dim__ * K) + one_over_lambda_1dim__ + q
       + len_z_T + len_rho + len_concentration + t + aux_unscaled_1dim__;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "continuous_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> gamma =
         std::vector<local_scalar_t__>(has_intercept, DUMMY_VAR__);
      current_statement__ = 1;
      gamma = in__.template read_constrain_lub<std::vector<local_scalar_t__>, 
                jacobian__>(stan::math::negative_infinity(),
                stan::math::positive_infinity(), lp__, has_intercept);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(z_beta_1dim__,
           DUMMY_VAR__);
      current_statement__ = 2;
      z_beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 z_beta_1dim__);
      std::vector<local_scalar_t__> global =
         std::vector<local_scalar_t__>(hs, DUMMY_VAR__);
      current_statement__ = 3;
      global = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                 jacobian__>(0, lp__, hs);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> local =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(hs, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 4;
      local = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
                jacobian__>(0, lp__, hs, K);
      std::vector<local_scalar_t__> caux =
         std::vector<local_scalar_t__>(caux_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      caux = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
               jacobian__>(0, lp__, caux_1dim__);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> mix =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(mix_1dim__, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__));
      current_statement__ = 6;
      mix = in__.template read_constrain_lb<
              std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
              jacobian__>(0, lp__, mix_1dim__, K);
      std::vector<local_scalar_t__> one_over_lambda =
         std::vector<local_scalar_t__>(one_over_lambda_1dim__, DUMMY_VAR__);
      current_statement__ = 7;
      one_over_lambda = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          one_over_lambda_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      current_statement__ = 8;
      z_b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(q);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_T =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_z_T,
           DUMMY_VAR__);
      current_statement__ = 9;
      z_T = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              len_z_T);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_rho,
           DUMMY_VAR__);
      current_statement__ = 10;
      rho = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              len_rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> zeta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_concentration,
           DUMMY_VAR__);
      current_statement__ = 11;
      zeta = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               len_concentration);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(t, DUMMY_VAR__);
      current_statement__ = 12;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__, t);
      std::vector<local_scalar_t__> aux_unscaled =
         std::vector<local_scalar_t__>(aux_unscaled_1dim__, DUMMY_VAR__);
      current_statement__ = 13;
      aux_unscaled = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       aux_unscaled_1dim__);
      std::vector<local_scalar_t__> aux =
         std::vector<local_scalar_t__>(aux_1dim__, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__, -1, 1> theta_L =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_theta_L,
           DUMMY_VAR__);
      current_statement__ = 20;
      if (stan::math::logical_negation(is_binary)) {
        current_statement__ = 18;
        stan::model::assign(aux,
          (stan::math::logical_eq(prior_dist_for_aux, 0) ?
             stan::model::rvalue(aux_unscaled, "aux_unscaled",
               stan::model::index_uni(1)) :
             (stan::math::logical_lte(prior_dist_for_aux, 2) ?
                ((prior_scale_for_aux *
                   stan::model::rvalue(aux_unscaled, "aux_unscaled",
                     stan::model::index_uni(1))) + prior_mean_for_aux) :
                (prior_scale_for_aux *
                  stan::model::rvalue(aux_unscaled, "aux_unscaled",
                    stan::model::index_uni(1))))),
          "assigning variable aux", stan::model::index_uni(1));
      } 
      current_statement__ = 53;
      if (stan::math::logical_eq(prior_dist, 0)) {
        current_statement__ = 52;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 51;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 50;
          stan::model::assign(beta,
            stan::math::add(stan::math::elt_multiply(z_beta, prior_scale),
              prior_mean), "assigning variable beta");
        } else {
          current_statement__ = 49;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 48;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 46;
              stan::model::assign(beta,
                ((CFt(
                    stan::model::rvalue(z_beta, "z_beta",
                      stan::model::index_uni(k)),
                    stan::model::rvalue(prior_df, "prior_df",
                      stan::model::index_uni(k)), pstream__) *
                   stan::model::rvalue(prior_scale, "prior_scale",
                     stan::model::index_uni(k))) +
                  stan::model::rvalue(prior_mean, "prior_mean",
                    stan::model::index_uni(k))),
                "assigning variable beta", stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 45;
            if (stan::math::logical_eq(prior_dist, 3)) {
              local_scalar_t__ c2 = DUMMY_VAR__;
              current_statement__ = 42;
              c2 = (stan::math::square(slab_scale) *
                     stan::model::rvalue(caux, "caux",
                       stan::model::index_uni(1)));
              current_statement__ = 43;
              stan::model::assign(beta,
                hs_prior(z_beta, global, local, global_prior_scale,
                  stan::model::rvalue(aux, "aux", stan::model::index_uni(1)),
                  c2, pstream__), "assigning variable beta");
            } else {
              current_statement__ = 41;
              if (stan::math::logical_eq(prior_dist, 4)) {
                local_scalar_t__ c2 = DUMMY_VAR__;
                current_statement__ = 38;
                c2 = (stan::math::square(slab_scale) *
                       stan::model::rvalue(caux, "caux",
                         stan::model::index_uni(1)));
                current_statement__ = 39;
                stan::model::assign(beta,
                  hsplus_prior(z_beta, global, local, global_prior_scale,
                    stan::model::rvalue(aux, "aux",
                      stan::model::index_uni(1)), c2, pstream__),
                  "assigning variable beta");
              } else {
                current_statement__ = 37;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 36;
                  stan::model::assign(beta,
                    stan::math::add(prior_mean,
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(prior_scale,
                          stan::math::sqrt(
                            stan::math::multiply(2,
                              stan::model::rvalue(mix, "mix",
                                stan::model::index_uni(1))))), z_beta)),
                    "assigning variable beta");
                } else {
                  current_statement__ = 35;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 34;
                    stan::model::assign(beta,
                      stan::math::add(prior_mean,
                        stan::math::elt_multiply(
                          stan::math::elt_multiply(
                            stan::math::multiply(
                              stan::model::rvalue(one_over_lambda,
                                "one_over_lambda", stan::model::index_uni(1)),
                              prior_scale),
                            stan::math::sqrt(
                              stan::math::multiply(2,
                                stan::model::rvalue(mix, "mix",
                                  stan::model::index_uni(1))))), z_beta)),
                      "assigning variable beta");
                  } else {
                    current_statement__ = 33;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      int z_pos = std::numeric_limits<int>::min();
                      current_statement__ = 21;
                      z_pos = 1;
                      current_statement__ = 31;
                      for (int k = 1; k <= K; ++k) {
                        current_statement__ = 22;
                        stan::model::assign(beta,
                          stan::model::rvalue(z_beta, "z_beta",
                            stan::model::index_uni(z_pos)),
                          "assigning variable beta", stan::model::index_uni(k));
                        current_statement__ = 23;
                        z_pos = (z_pos + 1);
                        current_statement__ = 27;
                        for (int n = 2;
                             n <= stan::model::rvalue(num_normals,
                                    "num_normals", stan::model::index_uni(k));
                             ++n) {
                          current_statement__ = 24;
                          stan::model::assign(beta,
                            (stan::model::rvalue(beta, "beta",
                               stan::model::index_uni(k)) *
                              stan::model::rvalue(z_beta, "z_beta",
                                stan::model::index_uni(z_pos))),
                            "assigning variable beta", stan::model::index_uni(k));
                          current_statement__ = 25;
                          z_pos = (z_pos + 1);
                        }
                        current_statement__ = 28;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) *
                            stan::math::pow(
                              stan::model::rvalue(prior_scale, "prior_scale",
                                stan::model::index_uni(k)),
                              stan::model::rvalue(num_normals, "num_normals",
                                stan::model::index_uni(k)))),
                          "assigning variable beta", stan::model::index_uni(k));
                        current_statement__ = 29;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) +
                            stan::model::rvalue(prior_mean, "prior_mean",
                              stan::model::index_uni(k))),
                          "assigning variable beta", stan::model::index_uni(k));
                      }
                    } 
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 64;
      if (stan::math::logical_negation(is_binary)) {
        current_statement__ = 61;
        if (stan::math::logical_eq(prior_dist_for_aux, 0)) {
          current_statement__ = 60;
          stan::model::assign(aux,
            stan::model::rvalue(aux_unscaled, "aux_unscaled",
              stan::model::index_uni(1)),
            "assigning variable aux", stan::model::index_uni(1));
        } else {
          current_statement__ = 56;
          stan::model::assign(aux,
            (prior_scale_for_aux *
              stan::model::rvalue(aux_unscaled, "aux_unscaled",
                stan::model::index_uni(1))),
            "assigning variable aux", stan::model::index_uni(1));
          current_statement__ = 58;
          if (stan::math::logical_lte(prior_dist_for_aux, 2)) {
            current_statement__ = 57;
            stan::model::assign(aux,
              (stan::model::rvalue(aux, "aux", stan::model::index_uni(1)) +
                prior_mean_for_aux),
              "assigning variable aux", stan::model::index_uni(1));
          } 
        }
        current_statement__ = 62;
        stan::model::assign(theta_L,
          make_theta_L(len_theta_L, p,
            stan::model::rvalue(aux, "aux", stan::model::index_uni(1)), tau,
            scale, zeta, rho, z_T, pstream__), "assigning variable theta_L");
      } else {
        current_statement__ = 54;
        stan::model::assign(theta_L,
          make_theta_L(len_theta_L, p, 1.0, tau, scale, zeta, rho,
            z_T, pstream__), "assigning variable theta_L");
      }
      current_statement__ = 65;
      stan::model::assign(b, make_b(z_b, theta_L, p, l, pstream__),
        "assigning variable b");
      {
        current_statement__ = 66;
        stan::math::validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> eta =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
        local_scalar_t__ dummy = DUMMY_VAR__;
        local_scalar_t__ actual_aux = DUMMY_VAR__;
        current_statement__ = 69;
        actual_aux = (is_binary ? 1.0 :
                        stan::model::rvalue(aux, "aux",
                          stan::model::index_uni(1)));
        current_statement__ = 70;
        stan::model::assign(eta, offset_, "assigning variable eta");
        current_statement__ = 72;
        if (stan::math::logical_gt(K, 0)) {
          current_statement__ = 71;
          stan::model::assign(eta,
            stan::math::add(stan::model::deep_copy(eta),
              stan::math::multiply(X, beta)), "assigning variable eta");
        } 
        current_statement__ = 73;
        stan::model::assign(eta,
          stan::math::add(stan::model::deep_copy(eta),
            csr_matrix_times_vector2(N, q, w, v, u, b, pstream__)),
          "assigning variable eta");
        current_statement__ = 75;
        if (stan::math::logical_eq(has_intercept, 1)) {
          current_statement__ = 74;
          stan::model::assign(eta,
            stan::math::add(stan::model::deep_copy(eta),
              stan::model::rvalue(gamma, "gamma", stan::model::index_uni(1))),
            "assigning variable eta");
        } 
        current_statement__ = 80;
        if (stan::math::logical_eq(has_weights, 0)) {
          current_statement__ = 78;
          lp_accum__.add(stan::math::normal_lpdf<false>(y, eta, actual_aux));
        } else {
          current_statement__ = 76;
          lp_accum__.add(
            (((-0.5 * N) *
               stan::math::log(
                 ((6.283185307179586232 * actual_aux) * actual_aux))) -
              ((0.5 *
                 stan::math::dot_product(weights,
                   stan::math::square(stan::math::subtract(y, eta)))) /
                (actual_aux * actual_aux))));
        }
        current_statement__ = 88;
        if ((stan::math::primitive_value((stan::math::primitive_value(
            stan::math::logical_negation(is_binary)) &&
            stan::math::primitive_value(
            stan::math::logical_gt(prior_dist_for_aux, 0)))) &&
            stan::math::primitive_value(
            stan::math::logical_gt(prior_scale_for_aux, 0)))) {
          local_scalar_t__ log_half = DUMMY_VAR__;
          current_statement__ = 81;
          log_half = -0.693147180559945286;
          current_statement__ = 86;
          if (stan::math::logical_eq(prior_dist_for_aux, 1)) {
            current_statement__ = 85;
            lp_accum__.add(
              (stan::math::normal_lpdf<false>(
                 stan::model::rvalue(aux_unscaled, "aux_unscaled",
                   stan::model::index_uni(1)), 0, 1) - log_half));
          } else {
            current_statement__ = 84;
            if (stan::math::logical_eq(prior_dist_for_aux, 2)) {
              current_statement__ = 83;
              lp_accum__.add(
                (stan::math::student_t_lpdf<false>(
                   stan::model::rvalue(aux_unscaled, "aux_unscaled",
                     stan::model::index_uni(1)), prior_df_for_aux, 0, 1) -
                  log_half));
            } else {
              current_statement__ = 82;
              lp_accum__.add(
                stan::math::exponential_lpdf<false>(
                  stan::model::rvalue(aux_unscaled, "aux_unscaled",
                    stan::model::index_uni(1)), 1));
            }
          }
        } 
        current_statement__ = 124;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 123;
          lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
        } else {
          current_statement__ = 122;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 121;
            lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
          } else {
            current_statement__ = 120;
            if (stan::math::logical_eq(prior_dist, 3)) {
              local_scalar_t__ log_half = DUMMY_VAR__;
              current_statement__ = 112;
              log_half = -0.693147180559945286;
              current_statement__ = 113;
              lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
              current_statement__ = 114;
              lp_accum__.add(
                (stan::math::normal_lpdf<false>(
                   stan::model::rvalue(local, "local",
                     stan::model::index_uni(1)), 0, 1) - log_half));
              current_statement__ = 115;
              lp_accum__.add(
                stan::math::inv_gamma_lpdf<false>(
                  stan::model::rvalue(local, "local",
                    stan::model::index_uni(2)),
                  stan::math::multiply(0.5, prior_df),
                  stan::math::multiply(0.5, prior_df)));
              current_statement__ = 116;
              lp_accum__.add(
                (stan::math::normal_lpdf<false>(
                   stan::model::rvalue(global, "global",
                     stan::model::index_uni(1)), 0, 1) - log_half));
              current_statement__ = 117;
              lp_accum__.add(
                stan::math::inv_gamma_lpdf<false>(
                  stan::model::rvalue(global, "global",
                    stan::model::index_uni(2)), (0.5 * global_prior_df),
                  (0.5 * global_prior_df)));
              current_statement__ = 118;
              lp_accum__.add(
                stan::math::inv_gamma_lpdf<false>(caux, (0.5 * slab_df),
                  (0.5 * slab_df)));
            } else {
              current_statement__ = 111;
              if (stan::math::logical_eq(prior_dist, 4)) {
                local_scalar_t__ log_half = DUMMY_VAR__;
                current_statement__ = 101;
                log_half = -0.693147180559945286;
                current_statement__ = 102;
                lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
                current_statement__ = 103;
                lp_accum__.add(
                  (stan::math::normal_lpdf<false>(
                     stan::model::rvalue(local, "local",
                       stan::model::index_uni(1)), 0, 1) - log_half));
                current_statement__ = 104;
                lp_accum__.add(
                  stan::math::inv_gamma_lpdf<false>(
                    stan::model::rvalue(local, "local",
                      stan::model::index_uni(2)),
                    stan::math::multiply(0.5, prior_df),
                    stan::math::multiply(0.5, prior_df)));
                current_statement__ = 105;
                lp_accum__.add(
                  (stan::math::normal_lpdf<false>(
                     stan::model::rvalue(local, "local",
                       stan::model::index_uni(3)), 0, 1) - log_half));
                current_statement__ = 106;
                lp_accum__.add(
                  stan::math::inv_gamma_lpdf<false>(
                    stan::model::rvalue(local, "local",
                      stan::model::index_uni(4)),
                    stan::math::multiply(0.5, prior_scale),
                    stan::math::multiply(0.5, prior_scale)));
                current_statement__ = 107;
                lp_accum__.add(
                  (stan::math::normal_lpdf<false>(
                     stan::model::rvalue(global, "global",
                       stan::model::index_uni(1)), 0, 1) - log_half));
                current_statement__ = 108;
                lp_accum__.add(
                  stan::math::inv_gamma_lpdf<false>(
                    stan::model::rvalue(global, "global",
                      stan::model::index_uni(2)), (0.5 * global_prior_df),
                    (0.5 * global_prior_df)));
                current_statement__ = 109;
                lp_accum__.add(
                  stan::math::inv_gamma_lpdf<false>(caux, (0.5 * slab_df),
                    (0.5 * slab_df)));
              } else {
                current_statement__ = 100;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 97;
                  lp_accum__.add(stan::math::normal_lpdf<false>(z_beta, 0, 1));
                  current_statement__ = 98;
                  lp_accum__.add(
                    stan::math::exponential_lpdf<false>(
                      stan::model::rvalue(mix, "mix",
                        stan::model::index_uni(1)), 1));
                } else {
                  current_statement__ = 96;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 92;
                    lp_accum__.add(
                      stan::math::normal_lpdf<false>(z_beta, 0, 1));
                    current_statement__ = 93;
                    lp_accum__.add(
                      stan::math::exponential_lpdf<false>(
                        stan::model::rvalue(mix, "mix",
                          stan::model::index_uni(1)), 1));
                    current_statement__ = 94;
                    lp_accum__.add(
                      stan::math::chi_square_lpdf<false>(
                        stan::model::rvalue(one_over_lambda,
                          "one_over_lambda", stan::model::index_uni(1)),
                        stan::model::rvalue(prior_df, "prior_df",
                          stan::model::index_uni(1))));
                  } else {
                    current_statement__ = 91;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      current_statement__ = 89;
                      lp_accum__.add(
                        stan::math::normal_lpdf<false>(z_beta, 0, 1));
                    } 
                  }
                }
              }
            }
          }
        }
        current_statement__ = 130;
        if (stan::math::logical_eq(has_intercept, 1)) {
          current_statement__ = 128;
          if (stan::math::logical_eq(prior_dist_for_intercept, 1)) {
            current_statement__ = 127;
            lp_accum__.add(
              stan::math::normal_lpdf<false>(gamma, prior_mean_for_intercept,
                prior_scale_for_intercept));
          } else {
            current_statement__ = 126;
            if (stan::math::logical_eq(prior_dist_for_intercept, 2)) {
              current_statement__ = 125;
              lp_accum__.add(
                stan::math::student_t_lpdf<false>(gamma,
                  prior_df_for_intercept, prior_mean_for_intercept,
                  prior_scale_for_intercept));
            } 
          }
        } 
        current_statement__ = 131;
        dummy = decov_lp<propto__>(z_b, z_T, rho, zeta, tau, regularization,
                  delta, shape, t, p, lp__, lp_accum__, pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "continuous_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      std::vector<double> gamma =
         std::vector<double>(has_intercept, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      gamma = in__.template read_constrain_lub<std::vector<local_scalar_t__>, 
                jacobian__>(stan::math::negative_infinity(),
                stan::math::positive_infinity(), lp__, has_intercept);
      Eigen::Matrix<double, -1, 1> z_beta =
         Eigen::Matrix<double, -1, 1>::Constant(z_beta_1dim__,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z_beta = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                 z_beta_1dim__);
      std::vector<double> global =
         std::vector<double>(hs, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      global = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
                 jacobian__>(0, lp__, hs);
      std::vector<Eigen::Matrix<double, -1, 1>> local =
         std::vector<Eigen::Matrix<double, -1, 1>>(hs, 
           Eigen::Matrix<double, -1, 1>::Constant(K,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      local = in__.template read_constrain_lb<
                std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
                jacobian__>(0, lp__, hs, K);
      std::vector<double> caux =
         std::vector<double>(caux_1dim__, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      caux = in__.template read_constrain_lb<std::vector<local_scalar_t__>, 
               jacobian__>(0, lp__, caux_1dim__);
      std::vector<Eigen::Matrix<double, -1, 1>> mix =
         std::vector<Eigen::Matrix<double, -1, 1>>(mix_1dim__, 
           Eigen::Matrix<double, -1, 1>::Constant(K,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 6;
      mix = in__.template read_constrain_lb<
              std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>, 
              jacobian__>(0, lp__, mix_1dim__, K);
      std::vector<double> one_over_lambda =
         std::vector<double>(one_over_lambda_1dim__, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      one_over_lambda = in__.template read_constrain_lb<
                          std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                          one_over_lambda_1dim__);
      Eigen::Matrix<double, -1, 1> z_b =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      z_b = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(q);
      Eigen::Matrix<double, -1, 1> z_T =
         Eigen::Matrix<double, -1, 1>::Constant(len_z_T,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 9;
      z_T = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
              len_z_T);
      Eigen::Matrix<double, -1, 1> rho =
         Eigen::Matrix<double, -1, 1>::Constant(len_rho,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 10;
      rho = in__.template read_constrain_lub<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, 1, lp__,
              len_rho);
      Eigen::Matrix<double, -1, 1> zeta =
         Eigen::Matrix<double, -1, 1>::Constant(len_concentration,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 11;
      zeta = in__.template read_constrain_lb<
               Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
               len_concentration);
      Eigen::Matrix<double, -1, 1> tau =
         Eigen::Matrix<double, -1, 1>::Constant(t,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 12;
      tau = in__.template read_constrain_lb<
              Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__, t);
      std::vector<double> aux_unscaled =
         std::vector<double>(aux_unscaled_1dim__, 
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 13;
      aux_unscaled = in__.template read_constrain_lb<
                       std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                       aux_unscaled_1dim__);
      std::vector<double> aux =
         std::vector<double>(aux_1dim__, 
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> beta =
         Eigen::Matrix<double, -1, 1>::Constant(K,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> b =
         Eigen::Matrix<double, -1, 1>::Constant(q,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> theta_L =
         Eigen::Matrix<double, -1, 1>::Constant(len_theta_L,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(gamma);
      out__.write(z_beta);
      out__.write(global);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          out__.write(local[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(caux);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          out__.write(mix[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      out__.write(one_over_lambda);
      out__.write(z_b);
      out__.write(z_T);
      out__.write(rho);
      out__.write(zeta);
      out__.write(tau);
      out__.write(aux_unscaled);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 20;
      if (stan::math::logical_negation(is_binary)) {
        current_statement__ = 18;
        stan::model::assign(aux,
          (stan::math::logical_eq(prior_dist_for_aux, 0) ?
             stan::model::rvalue(aux_unscaled, "aux_unscaled",
               stan::model::index_uni(1)) :
             (stan::math::logical_lte(prior_dist_for_aux, 2) ?
                ((prior_scale_for_aux *
                   stan::model::rvalue(aux_unscaled, "aux_unscaled",
                     stan::model::index_uni(1))) + prior_mean_for_aux) :
                (prior_scale_for_aux *
                  stan::model::rvalue(aux_unscaled, "aux_unscaled",
                    stan::model::index_uni(1))))),
          "assigning variable aux", stan::model::index_uni(1));
      } 
      current_statement__ = 53;
      if (stan::math::logical_eq(prior_dist, 0)) {
        current_statement__ = 52;
        stan::model::assign(beta, z_beta, "assigning variable beta");
      } else {
        current_statement__ = 51;
        if (stan::math::logical_eq(prior_dist, 1)) {
          current_statement__ = 50;
          stan::model::assign(beta,
            stan::math::add(stan::math::elt_multiply(z_beta, prior_scale),
              prior_mean), "assigning variable beta");
        } else {
          current_statement__ = 49;
          if (stan::math::logical_eq(prior_dist, 2)) {
            current_statement__ = 48;
            for (int k = 1; k <= K; ++k) {
              current_statement__ = 46;
              stan::model::assign(beta,
                ((CFt(
                    stan::model::rvalue(z_beta, "z_beta",
                      stan::model::index_uni(k)),
                    stan::model::rvalue(prior_df, "prior_df",
                      stan::model::index_uni(k)), pstream__) *
                   stan::model::rvalue(prior_scale, "prior_scale",
                     stan::model::index_uni(k))) +
                  stan::model::rvalue(prior_mean, "prior_mean",
                    stan::model::index_uni(k))),
                "assigning variable beta", stan::model::index_uni(k));
            }
          } else {
            current_statement__ = 45;
            if (stan::math::logical_eq(prior_dist, 3)) {
              double c2 = std::numeric_limits<double>::quiet_NaN();
              current_statement__ = 42;
              c2 = (stan::math::square(slab_scale) *
                     stan::model::rvalue(caux, "caux",
                       stan::model::index_uni(1)));
              current_statement__ = 43;
              stan::model::assign(beta,
                hs_prior(z_beta, global, local, global_prior_scale,
                  stan::model::rvalue(aux, "aux", stan::model::index_uni(1)),
                  c2, pstream__), "assigning variable beta");
            } else {
              current_statement__ = 41;
              if (stan::math::logical_eq(prior_dist, 4)) {
                double c2 = std::numeric_limits<double>::quiet_NaN();
                current_statement__ = 38;
                c2 = (stan::math::square(slab_scale) *
                       stan::model::rvalue(caux, "caux",
                         stan::model::index_uni(1)));
                current_statement__ = 39;
                stan::model::assign(beta,
                  hsplus_prior(z_beta, global, local, global_prior_scale,
                    stan::model::rvalue(aux, "aux",
                      stan::model::index_uni(1)), c2, pstream__),
                  "assigning variable beta");
              } else {
                current_statement__ = 37;
                if (stan::math::logical_eq(prior_dist, 5)) {
                  current_statement__ = 36;
                  stan::model::assign(beta,
                    stan::math::add(prior_mean,
                      stan::math::elt_multiply(
                        stan::math::elt_multiply(prior_scale,
                          stan::math::sqrt(
                            stan::math::multiply(2,
                              stan::model::rvalue(mix, "mix",
                                stan::model::index_uni(1))))), z_beta)),
                    "assigning variable beta");
                } else {
                  current_statement__ = 35;
                  if (stan::math::logical_eq(prior_dist, 6)) {
                    current_statement__ = 34;
                    stan::model::assign(beta,
                      stan::math::add(prior_mean,
                        stan::math::elt_multiply(
                          stan::math::elt_multiply(
                            stan::math::multiply(
                              stan::model::rvalue(one_over_lambda,
                                "one_over_lambda", stan::model::index_uni(1)),
                              prior_scale),
                            stan::math::sqrt(
                              stan::math::multiply(2,
                                stan::model::rvalue(mix, "mix",
                                  stan::model::index_uni(1))))), z_beta)),
                      "assigning variable beta");
                  } else {
                    current_statement__ = 33;
                    if (stan::math::logical_eq(prior_dist, 7)) {
                      int z_pos = std::numeric_limits<int>::min();
                      current_statement__ = 21;
                      z_pos = 1;
                      current_statement__ = 31;
                      for (int k = 1; k <= K; ++k) {
                        current_statement__ = 22;
                        stan::model::assign(beta,
                          stan::model::rvalue(z_beta, "z_beta",
                            stan::model::index_uni(z_pos)),
                          "assigning variable beta", stan::model::index_uni(k));
                        current_statement__ = 23;
                        z_pos = (z_pos + 1);
                        current_statement__ = 27;
                        for (int n = 2;
                             n <= stan::model::rvalue(num_normals,
                                    "num_normals", stan::model::index_uni(k));
                             ++n) {
                          current_statement__ = 24;
                          stan::model::assign(beta,
                            (stan::model::rvalue(beta, "beta",
                               stan::model::index_uni(k)) *
                              stan::model::rvalue(z_beta, "z_beta",
                                stan::model::index_uni(z_pos))),
                            "assigning variable beta", stan::model::index_uni(k));
                          current_statement__ = 25;
                          z_pos = (z_pos + 1);
                        }
                        current_statement__ = 28;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) *
                            stan::math::pow(
                              stan::model::rvalue(prior_scale, "prior_scale",
                                stan::model::index_uni(k)),
                              stan::model::rvalue(num_normals, "num_normals",
                                stan::model::index_uni(k)))),
                          "assigning variable beta", stan::model::index_uni(k));
                        current_statement__ = 29;
                        stan::model::assign(beta,
                          (stan::model::rvalue(beta, "beta",
                             stan::model::index_uni(k)) +
                            stan::model::rvalue(prior_mean, "prior_mean",
                              stan::model::index_uni(k))),
                          "assigning variable beta", stan::model::index_uni(k));
                      }
                    } 
                  }
                }
              }
            }
          }
        }
      }
      current_statement__ = 64;
      if (stan::math::logical_negation(is_binary)) {
        current_statement__ = 61;
        if (stan::math::logical_eq(prior_dist_for_aux, 0)) {
          current_statement__ = 60;
          stan::model::assign(aux,
            stan::model::rvalue(aux_unscaled, "aux_unscaled",
              stan::model::index_uni(1)),
            "assigning variable aux", stan::model::index_uni(1));
        } else {
          current_statement__ = 56;
          stan::model::assign(aux,
            (prior_scale_for_aux *
              stan::model::rvalue(aux_unscaled, "aux_unscaled",
                stan::model::index_uni(1))),
            "assigning variable aux", stan::model::index_uni(1));
          current_statement__ = 58;
          if (stan::math::logical_lte(prior_dist_for_aux, 2)) {
            current_statement__ = 57;
            stan::model::assign(aux,
              (stan::model::rvalue(aux, "aux", stan::model::index_uni(1)) +
                prior_mean_for_aux),
              "assigning variable aux", stan::model::index_uni(1));
          } 
        }
        current_statement__ = 62;
        stan::model::assign(theta_L,
          make_theta_L(len_theta_L, p,
            stan::model::rvalue(aux, "aux", stan::model::index_uni(1)), tau,
            scale, zeta, rho, z_T, pstream__), "assigning variable theta_L");
      } else {
        current_statement__ = 54;
        stan::model::assign(theta_L,
          make_theta_L(len_theta_L, p, 1.0, tau, scale, zeta, rho,
            z_T, pstream__), "assigning variable theta_L");
      }
      current_statement__ = 65;
      stan::model::assign(b, make_b(z_b, theta_L, p, l, pstream__),
        "assigning variable b");
      if (emit_transformed_parameters__) {
        out__.write(aux);
        out__.write(beta);
        out__.write(b);
        out__.write(theta_L);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> gamma =
         std::vector<local_scalar_t__>(has_intercept, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
        gamma[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lub(stan::math::negative_infinity(),
        stan::math::positive_infinity(), gamma);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_beta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(z_beta_1dim__,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
        stan::model::assign(z_beta, in__.read<local_scalar_t__>(),
          "assigning variable z_beta", stan::model::index_uni(sym1__));
      }
      out__.write(z_beta);
      std::vector<local_scalar_t__> global =
         std::vector<local_scalar_t__>(hs, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= hs; ++sym1__) {
        global[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, global);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> local =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(hs, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          stan::model::assign(local, in__.read<local_scalar_t__>(),
            "assigning variable local", stan::model::index_uni(sym2__),
                                          stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, local);
      std::vector<local_scalar_t__> caux =
         std::vector<local_scalar_t__>(caux_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= caux_1dim__; ++sym1__) {
        caux[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, caux);
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> mix =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(mix_1dim__, 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(K, DUMMY_VAR__));
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          stan::model::assign(mix, in__.read<local_scalar_t__>(),
            "assigning variable mix", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
        }
      }
      out__.write_free_lb(0, mix);
      std::vector<local_scalar_t__> one_over_lambda =
         std::vector<local_scalar_t__>(one_over_lambda_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= one_over_lambda_1dim__; ++sym1__) {
        one_over_lambda[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, one_over_lambda);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(q, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        stan::model::assign(z_b, in__.read<local_scalar_t__>(),
          "assigning variable z_b", stan::model::index_uni(sym1__));
      }
      out__.write(z_b);
      Eigen::Matrix<local_scalar_t__, -1, 1> z_T =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_z_T,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
        stan::model::assign(z_T, in__.read<local_scalar_t__>(),
          "assigning variable z_T", stan::model::index_uni(sym1__));
      }
      out__.write(z_T);
      Eigen::Matrix<local_scalar_t__, -1, 1> rho =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_rho,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
        stan::model::assign(rho, in__.read<local_scalar_t__>(),
          "assigning variable rho", stan::model::index_uni(sym1__));
      }
      out__.write_free_lub(0, 1, rho);
      Eigen::Matrix<local_scalar_t__, -1, 1> zeta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(len_concentration,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
        stan::model::assign(zeta, in__.read<local_scalar_t__>(),
          "assigning variable zeta", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, zeta);
      Eigen::Matrix<local_scalar_t__, -1, 1> tau =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(t, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
        stan::model::assign(tau, in__.read<local_scalar_t__>(),
          "assigning variable tau", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, tau);
      std::vector<local_scalar_t__> aux_unscaled =
         std::vector<local_scalar_t__>(aux_unscaled_1dim__, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= aux_unscaled_1dim__; ++sym1__) {
        aux_unscaled[(sym1__ - 1)] = in__.read<local_scalar_t__>();
      }
      out__.write_free_lb(0, aux_unscaled);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"gamma", "z_beta", "global", "local",
      "caux", "mix", "one_over_lambda", "z_b", "z_T", "rho", "zeta", "tau",
      "aux_unscaled", "aux", "beta", "b", "theta_L"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(has_intercept)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(z_beta_1dim__)},
      std::vector<size_t>{static_cast<size_t>(hs)},
      std::vector<size_t>{static_cast<size_t>(hs), static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(caux_1dim__)},
      std::vector<size_t>{static_cast<size_t>(mix_1dim__),
                          static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(one_over_lambda_1dim__)},
      std::vector<size_t>{static_cast<size_t>(q)},
      std::vector<size_t>{static_cast<size_t>(len_z_T)},
      std::vector<size_t>{static_cast<size_t>(len_rho)},
      std::vector<size_t>{static_cast<size_t>(len_concentration)},
      std::vector<size_t>{static_cast<size_t>(t)},
      std::vector<size_t>{static_cast<size_t>(aux_unscaled_1dim__)},
      std::vector<size_t>{static_cast<size_t>(aux_1dim__)},
      std::vector<size_t>{static_cast<size_t>(K)},
      std::vector<size_t>{static_cast<size_t>(q)},
      std::vector<size_t>{static_cast<size_t>(len_theta_L)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= hs; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "global" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "local" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= caux_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "caux" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= one_over_lambda_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "one_over_lambda" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_T" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= aux_unscaled_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aux_unscaled" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= aux_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "aux" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= len_theta_L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_L" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= has_intercept; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= z_beta_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_beta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= hs; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "global" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= hs; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "local" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= caux_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "caux" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= mix_1dim__; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "mix" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    for (int sym1__ = 1; sym1__ <= one_over_lambda_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "one_over_lambda" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_b" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_z_T; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_T" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_rho; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "rho" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= len_concentration; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "zeta" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= t; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= aux_unscaled_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "aux_unscaled" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= aux_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "aux" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= q; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= len_theta_L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta_L" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"global\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"local\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"caux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(caux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mix_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"one_over_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(one_over_lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"z_T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_z_T) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_rho) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_concentration) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"parameters\"},{\"name\":\"aux_unscaled\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_unscaled_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_theta_L) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"gamma\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(has_intercept) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(z_beta_1dim__) + "},\"block\":\"parameters\"},{\"name\":\"global\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"local\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(hs) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"caux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(caux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"mix\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(mix_1dim__) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "}},\"block\":\"parameters\"},{\"name\":\"one_over_lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(one_over_lambda_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z_b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"parameters\"},{\"name\":\"z_T\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_z_T) + "},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_rho) + "},\"block\":\"parameters\"},{\"name\":\"zeta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_concentration) + "},\"block\":\"parameters\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(t) + "},\"block\":\"parameters\"},{\"name\":\"aux_unscaled\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_unscaled_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"aux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(aux_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(K) + "},\"block\":\"transformed_parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(q) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta_L\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(len_theta_L) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((has_intercept + z_beta_1dim__) + hs) + (hs * K)) + caux_1dim__)
           + (mix_1dim__ * K)) + one_over_lambda_1dim__) + q) + len_z_T) +
       len_rho) + len_concentration) + t) + aux_unscaled_1dim__);
      const size_t num_transformed = 
  (((aux_1dim__ + K) + q) + len_theta_L);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((((((((has_intercept + z_beta_1dim__) + hs) + (hs * K)) + caux_1dim__)
           + (mix_1dim__ * K)) + one_over_lambda_1dim__) + q) + len_z_T) +
       len_rho) + len_concentration) + t) + aux_unscaled_1dim__);
      const size_t num_transformed = 
  (((aux_1dim__ + K) + q) + len_theta_L);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 13> names__{"gamma", "z_beta",
      "global", "local", "caux", "mix", "one_over_lambda", "z_b", "z_T",
      "rho", "zeta", "tau", "aux_unscaled"};
      const std::array<Eigen::Index, 13> constrain_param_sizes__{has_intercept
       , z_beta_1dim__, hs, (hs * K), caux_1dim__, (mix_1dim__ * K),
       one_over_lambda_1dim__, q, len_z_T, len_rho, len_concentration, 
       t, aux_unscaled_1dim__};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = continuous_model_namespace::continuous_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return continuous_model_namespace::profiles__;
}

#endif



